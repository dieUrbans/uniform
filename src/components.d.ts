/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ChipDesign } from "./components/w-chip/w-chip";
import { FormButton, FormField } from "./components/w-form/w-form";
import { NotficationOption, NotificationType } from "./components/w-notification/w-notification";
import { Option } from "./components/w-radiogroup/w-radiogroup";
import { Option as Option1 } from "./components/w-select/w-select";
export namespace Components {
    interface WAlert {
    }
    interface WButton {
        /**
          * color design
         */
        "design"?: 'secondary' | 'error' | 'success' | 'warning' | 'primary';
        /**
          * show disabled state
         */
        "disabled"?: boolean;
        /**
          * show only text
         */
        "flat"?: boolean;
        /**
          * change design, only show outlines
         */
        "outline"?: boolean;
        /**
          * enable border radius
         */
        "rounded"?: 'left' | 'right' | 'top' | 'bottom' | 'none' | 'all';
        /**
          * button size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * set button type
         */
        "type"?: 'button' | 'submit' | 'reset';
    }
    interface WCardselect {
    }
    interface WCheckbox {
        "checked": boolean;
        "disabled": boolean;
        "label": string;
        "set": (checked: boolean) => Promise<void>;
        "size": 'small' | 'medium' | 'large';
    }
    interface WChip {
        /**
          * set chip text bold
         */
        "bold": boolean;
        /**
          * enable wClick event on chip
         */
        "clickable": boolean;
        /**
          * color of the chip
         */
        "design": ChipDesign;
        /**
          * (optional) label of the chip
         */
        "label"?: string;
        /**
          * size of the chip
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface WCol {
        /**
          * flex align-items: start | center | end | space-between | space-around | space-evenly
         */
        "align": 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';
        /**
          * use with w-grid to set area
         */
        "area"?: string;
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap": string;
        /**
          * flex justify-content: flex-start | flex-end | center | baseline | stretch
         */
        "justify": 'start' | 'center' | 'end' | 'stretch';
        /**
          * padding bottom and top: string, e.g. '1rem', '1px'
         */
        "padding": string;
        /**
          * used with w-grid, set size based on number of columns on w-grid (default is 12)
         */
        "size": number;
        /**
          * flex wrap: nowrap | wrap | wrap-reverse
         */
        "wrap": 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface WDialog {
        "name": string;
    }
    interface WDropdown {
    }
    interface WFilepicker {
        "fileEnding": string;
        "filePlural": string;
        "label": string;
        "multiple": boolean;
        "noFile": string;
        "size": 'small' | 'large';
    }
    interface WForm {
        "buttons": Array<FormButton>;
        "fields": Array<FormField>;
        "layout": string;
    }
    interface WGrid {
        /**
          * optional naming of grid areas
         */
        "area": Array<string[]>;
        /**
          * number of columns or array of column widths
         */
        "columns": number | Array<string>;
        /**
          * width, height of grid
         */
        "gap": string;
        /**
          * height of grid
         */
        "height": string;
        /**
          * number of rows or array of row heights
         */
        "rows": number | Array<string>;
        /**
          * width of grid
         */
        "width": string;
    }
    interface WGroup {
        /**
          * direction of the group
         */
        "direction": 'row' | 'column';
    }
    interface WIcon {
    }
    interface WInput {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design possible values: - 'default', 'error', 'success', 'warning'
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label": string;
        /**
          * if input type == numeric -> max value
         */
        "max"?: string;
        /**
          * if input type == numeric -> min value
         */
        "min"?: string;
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        /**
          * set blur on native input
         */
        "setBlur": () => Promise<void>;
        /**
          * set focus on native input
         */
        "setFocus": () => Promise<void>;
        /**
          * decide if (and which site) a slot should be rendered
         */
        "showSlot"?: 'left' | 'right' | 'both';
        /**
          * size of the input
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type == numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate": boolean;
        /**
          * the value of the input
         */
        "value": string | number | null;
    }
    interface WMenu {
        "area"?: string;
        "direction": 'horizontal' | 'vertical';
        "minimizeable": boolean;
    }
    interface WModal {
        "closeModal": (name: string) => Promise<void>;
        "closeOnClick": boolean;
        "maxHeight": string;
        "maxWidth": string;
        "minHeight": string;
        "minWidth": string;
        "mode": 'desktop' | 'mobile';
        "moveable": boolean;
        "name": string;
        "resetPosition": boolean;
        "resizeable": boolean;
        "showModal": (name: string) => Promise<void>;
        "topRightClose": boolean;
    }
    interface WNotification {
        "error": (title: string, message?: string, delay?: number) => Promise<void>;
        "position": 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';
        "show": (type: NotificationType, options: NotficationOption) => Promise<void>;
        "success": (title: string, message?: string, delay?: number) => Promise<void>;
        "warning": (title: string, message?: string, delay?: number) => Promise<void>;
    }
    interface WObserver {
    }
    interface WRadiogroup {
        "alignment": 'vertical' | 'horizontal';
        "label": string;
        "options": Array<Option>;
        "value": any;
    }
    interface WRow {
        /**
          * flex align-items
         */
        "align": 'start' | 'center' | 'end' | 'stretch';
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap": string;
        /**
          * flex justify-content
         */
        "justify": 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';
        /**
          * padding left and right: string, e.g. '1rem', '1px'
         */
        "padding": string;
        /**
          * flex wrap
         */
        "wrap": 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface WSelect {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design possible values: - 'secondary', 'primary', 'error', 'success', 'warning'
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label": string;
        /**
          * if input type == numeric -> max value
         */
        "max"?: string;
        /**
          * if input type == numeric -> min value
         */
        "min"?: string;
        "multiple": boolean;
        "options": Option[];
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        "searchable": boolean;
        /**
          * set blur on native input
         */
        "setBlur": () => Promise<void>;
        /**
          * set focus on native input
         */
        "setFocus": () => Promise<void>;
        /**
          * size of the input
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type == numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate": boolean;
    }
    interface WSlider {
    }
    interface WSpoiler {
        /**
          * label of the spoiler
         */
        "label": string;
        /**
          * set the size of the spoiler
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface WStepper {
        /**
          * disabled state of the submit button
         */
        "allData": boolean;
        /**
          * label of the next step button
         */
        "nextLabel"?: string;
        /**
          * disabled state of the next step button
         */
        "nextStepAvailable": boolean;
        /**
          * label of the previous step button
         */
        "prevLabel"?: string;
        /**
          * define steps without label -> steps: 3 with label -> steps: [1,'2',3] both do the same, but with array you can define the label
         */
        "steps": number | Array<number | string>;
        /**
          * label of the next step button
         */
        "submitLabel"?: string;
    }
    interface WTabs {
    }
    interface WTextarea {
        "cols": number;
        "design": 'primary' | 'error' | 'success' | 'warning' | 'outline' | 'secondary';
        "disabled": boolean;
        "label"?: string;
        "readonly": boolean;
        "required": boolean;
        "resize": 'none' | 'both' | 'horizontal' | 'vertical';
        "rows": number;
        "size": 'small' | 'medium' | 'large';
        "value": string | null;
    }
    interface WToggle {
    }
    interface WTooltip {
        /**
          * position of the tooltip
         */
        "axis": 'x' | 'y';
        /**
          * text of the tooltip
         */
        "text": string;
    }
}
declare global {
    interface HTMLWAlertElement extends Components.WAlert, HTMLStencilElement {
    }
    var HTMLWAlertElement: {
        prototype: HTMLWAlertElement;
        new (): HTMLWAlertElement;
    };
    interface HTMLWButtonElement extends Components.WButton, HTMLStencilElement {
    }
    var HTMLWButtonElement: {
        prototype: HTMLWButtonElement;
        new (): HTMLWButtonElement;
    };
    interface HTMLWCardselectElement extends Components.WCardselect, HTMLStencilElement {
    }
    var HTMLWCardselectElement: {
        prototype: HTMLWCardselectElement;
        new (): HTMLWCardselectElement;
    };
    interface HTMLWCheckboxElement extends Components.WCheckbox, HTMLStencilElement {
    }
    var HTMLWCheckboxElement: {
        prototype: HTMLWCheckboxElement;
        new (): HTMLWCheckboxElement;
    };
    interface HTMLWChipElement extends Components.WChip, HTMLStencilElement {
    }
    var HTMLWChipElement: {
        prototype: HTMLWChipElement;
        new (): HTMLWChipElement;
    };
    interface HTMLWColElement extends Components.WCol, HTMLStencilElement {
    }
    var HTMLWColElement: {
        prototype: HTMLWColElement;
        new (): HTMLWColElement;
    };
    interface HTMLWDialogElement extends Components.WDialog, HTMLStencilElement {
    }
    var HTMLWDialogElement: {
        prototype: HTMLWDialogElement;
        new (): HTMLWDialogElement;
    };
    interface HTMLWDropdownElement extends Components.WDropdown, HTMLStencilElement {
    }
    var HTMLWDropdownElement: {
        prototype: HTMLWDropdownElement;
        new (): HTMLWDropdownElement;
    };
    interface HTMLWFilepickerElement extends Components.WFilepicker, HTMLStencilElement {
    }
    var HTMLWFilepickerElement: {
        prototype: HTMLWFilepickerElement;
        new (): HTMLWFilepickerElement;
    };
    interface HTMLWFormElement extends Components.WForm, HTMLStencilElement {
    }
    var HTMLWFormElement: {
        prototype: HTMLWFormElement;
        new (): HTMLWFormElement;
    };
    interface HTMLWGridElement extends Components.WGrid, HTMLStencilElement {
    }
    var HTMLWGridElement: {
        prototype: HTMLWGridElement;
        new (): HTMLWGridElement;
    };
    interface HTMLWGroupElement extends Components.WGroup, HTMLStencilElement {
    }
    var HTMLWGroupElement: {
        prototype: HTMLWGroupElement;
        new (): HTMLWGroupElement;
    };
    interface HTMLWIconElement extends Components.WIcon, HTMLStencilElement {
    }
    var HTMLWIconElement: {
        prototype: HTMLWIconElement;
        new (): HTMLWIconElement;
    };
    interface HTMLWInputElement extends Components.WInput, HTMLStencilElement {
    }
    var HTMLWInputElement: {
        prototype: HTMLWInputElement;
        new (): HTMLWInputElement;
    };
    interface HTMLWMenuElement extends Components.WMenu, HTMLStencilElement {
    }
    var HTMLWMenuElement: {
        prototype: HTMLWMenuElement;
        new (): HTMLWMenuElement;
    };
    interface HTMLWModalElement extends Components.WModal, HTMLStencilElement {
    }
    var HTMLWModalElement: {
        prototype: HTMLWModalElement;
        new (): HTMLWModalElement;
    };
    interface HTMLWNotificationElement extends Components.WNotification, HTMLStencilElement {
    }
    var HTMLWNotificationElement: {
        prototype: HTMLWNotificationElement;
        new (): HTMLWNotificationElement;
    };
    interface HTMLWObserverElement extends Components.WObserver, HTMLStencilElement {
    }
    var HTMLWObserverElement: {
        prototype: HTMLWObserverElement;
        new (): HTMLWObserverElement;
    };
    interface HTMLWRadiogroupElement extends Components.WRadiogroup, HTMLStencilElement {
    }
    var HTMLWRadiogroupElement: {
        prototype: HTMLWRadiogroupElement;
        new (): HTMLWRadiogroupElement;
    };
    interface HTMLWRowElement extends Components.WRow, HTMLStencilElement {
    }
    var HTMLWRowElement: {
        prototype: HTMLWRowElement;
        new (): HTMLWRowElement;
    };
    interface HTMLWSelectElement extends Components.WSelect, HTMLStencilElement {
    }
    var HTMLWSelectElement: {
        prototype: HTMLWSelectElement;
        new (): HTMLWSelectElement;
    };
    interface HTMLWSliderElement extends Components.WSlider, HTMLStencilElement {
    }
    var HTMLWSliderElement: {
        prototype: HTMLWSliderElement;
        new (): HTMLWSliderElement;
    };
    interface HTMLWSpoilerElement extends Components.WSpoiler, HTMLStencilElement {
    }
    var HTMLWSpoilerElement: {
        prototype: HTMLWSpoilerElement;
        new (): HTMLWSpoilerElement;
    };
    interface HTMLWStepperElement extends Components.WStepper, HTMLStencilElement {
    }
    var HTMLWStepperElement: {
        prototype: HTMLWStepperElement;
        new (): HTMLWStepperElement;
    };
    interface HTMLWTabsElement extends Components.WTabs, HTMLStencilElement {
    }
    var HTMLWTabsElement: {
        prototype: HTMLWTabsElement;
        new (): HTMLWTabsElement;
    };
    interface HTMLWTextareaElement extends Components.WTextarea, HTMLStencilElement {
    }
    var HTMLWTextareaElement: {
        prototype: HTMLWTextareaElement;
        new (): HTMLWTextareaElement;
    };
    interface HTMLWToggleElement extends Components.WToggle, HTMLStencilElement {
    }
    var HTMLWToggleElement: {
        prototype: HTMLWToggleElement;
        new (): HTMLWToggleElement;
    };
    interface HTMLWTooltipElement extends Components.WTooltip, HTMLStencilElement {
    }
    var HTMLWTooltipElement: {
        prototype: HTMLWTooltipElement;
        new (): HTMLWTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "w-alert": HTMLWAlertElement;
        "w-button": HTMLWButtonElement;
        "w-cardselect": HTMLWCardselectElement;
        "w-checkbox": HTMLWCheckboxElement;
        "w-chip": HTMLWChipElement;
        "w-col": HTMLWColElement;
        "w-dialog": HTMLWDialogElement;
        "w-dropdown": HTMLWDropdownElement;
        "w-filepicker": HTMLWFilepickerElement;
        "w-form": HTMLWFormElement;
        "w-grid": HTMLWGridElement;
        "w-group": HTMLWGroupElement;
        "w-icon": HTMLWIconElement;
        "w-input": HTMLWInputElement;
        "w-menu": HTMLWMenuElement;
        "w-modal": HTMLWModalElement;
        "w-notification": HTMLWNotificationElement;
        "w-observer": HTMLWObserverElement;
        "w-radiogroup": HTMLWRadiogroupElement;
        "w-row": HTMLWRowElement;
        "w-select": HTMLWSelectElement;
        "w-slider": HTMLWSliderElement;
        "w-spoiler": HTMLWSpoilerElement;
        "w-stepper": HTMLWStepperElement;
        "w-tabs": HTMLWTabsElement;
        "w-textarea": HTMLWTextareaElement;
        "w-toggle": HTMLWToggleElement;
        "w-tooltip": HTMLWTooltipElement;
    }
}
declare namespace LocalJSX {
    interface WAlert {
    }
    interface WButton {
        /**
          * color design
         */
        "design"?: 'secondary' | 'error' | 'success' | 'warning' | 'primary';
        /**
          * show disabled state
         */
        "disabled"?: boolean;
        /**
          * show only text
         */
        "flat"?: boolean;
        /**
          * emit wClick on button click
         */
        "onWClick"?: (event: CustomEvent<void>) => void;
        /**
          * change design, only show outlines
         */
        "outline"?: boolean;
        /**
          * enable border radius
         */
        "rounded"?: 'left' | 'right' | 'top' | 'bottom' | 'none' | 'all';
        /**
          * button size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * set button type
         */
        "type"?: 'button' | 'submit' | 'reset';
    }
    interface WCardselect {
    }
    interface WCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "onWChange"?: (event: CustomEvent<any>) => void;
        "size"?: 'small' | 'medium' | 'large';
    }
    interface WChip {
        /**
          * set chip text bold
         */
        "bold"?: boolean;
        /**
          * enable wClick event on chip
         */
        "clickable"?: boolean;
        /**
          * color of the chip
         */
        "design"?: ChipDesign;
        /**
          * (optional) label of the chip
         */
        "label"?: string;
        /**
          * emit wClick event on chip click
         */
        "onWClick"?: (event: CustomEvent<void>) => void;
        /**
          * size of the chip
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface WCol {
        /**
          * flex align-items: start | center | end | space-between | space-around | space-evenly
         */
        "align"?: 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';
        /**
          * use with w-grid to set area
         */
        "area"?: string;
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap"?: string;
        /**
          * flex justify-content: flex-start | flex-end | center | baseline | stretch
         */
        "justify"?: 'start' | 'center' | 'end' | 'stretch';
        /**
          * padding bottom and top: string, e.g. '1rem', '1px'
         */
        "padding"?: string;
        /**
          * used with w-grid, set size based on number of columns on w-grid (default is 12)
         */
        "size"?: number;
        /**
          * flex wrap: nowrap | wrap | wrap-reverse
         */
        "wrap"?: 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface WDialog {
        "name"?: string;
    }
    interface WDropdown {
    }
    interface WFilepicker {
        "fileEnding"?: string;
        "filePlural"?: string;
        "label"?: string;
        "multiple"?: boolean;
        "noFile"?: string;
        "onWSelect"?: (event: CustomEvent<FileList>) => void;
        "size"?: 'small' | 'large';
    }
    interface WForm {
        "buttons"?: Array<FormButton>;
        "fields"?: Array<FormField>;
        "layout"?: string;
        "onWNextStep"?: (event: CustomEvent<any>) => void;
        "onWSubmit"?: (event: CustomEvent<any>) => void;
    }
    interface WGrid {
        /**
          * optional naming of grid areas
         */
        "area"?: Array<string[]>;
        /**
          * number of columns or array of column widths
         */
        "columns"?: number | Array<string>;
        /**
          * width, height of grid
         */
        "gap"?: string;
        /**
          * height of grid
         */
        "height"?: string;
        /**
          * number of rows or array of row heights
         */
        "rows"?: number | Array<string>;
        /**
          * width of grid
         */
        "width"?: string;
    }
    interface WGroup {
        /**
          * direction of the group
         */
        "direction"?: 'row' | 'column';
    }
    interface WIcon {
    }
    interface WInput {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design possible values: - 'default', 'error', 'success', 'warning'
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label"?: string;
        /**
          * if input type == numeric -> max value
         */
        "max"?: string;
        /**
          * if input type == numeric -> min value
         */
        "min"?: string;
        /**
          * emitted on blur
         */
        "onWBlur"?: (event: CustomEvent<void>) => void;
        /**
          * emitted on change
         */
        "onWChange"?: (event: CustomEvent<number | string>) => void;
        /**
          * emitted on focus
         */
        "onWFocus"?: (event: CustomEvent<void>) => void;
        /**
          * emitted on input
         */
        "onWInput"?: (event: CustomEvent<number | string>) => void;
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        /**
          * decide if (and which site) a slot should be rendered
         */
        "showSlot"?: 'left' | 'right' | 'both';
        /**
          * size of the input
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type == numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate"?: boolean;
        /**
          * the value of the input
         */
        "value"?: string | number | null;
    }
    interface WMenu {
        "area"?: string;
        "direction"?: 'horizontal' | 'vertical';
        "minimizeable"?: boolean;
    }
    interface WModal {
        "closeOnClick"?: boolean;
        "maxHeight"?: string;
        "maxWidth"?: string;
        "minHeight"?: string;
        "minWidth"?: string;
        "mode"?: 'desktop' | 'mobile';
        "moveable"?: boolean;
        "name"?: string;
        "onBeforeOpen"?: (event: CustomEvent<any>) => void;
        "resetPosition"?: boolean;
        "resizeable"?: boolean;
        "topRightClose"?: boolean;
    }
    interface WNotification {
        "position"?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';
    }
    interface WObserver {
        /**
          * emit `invisible` event, when element looses visibility in viewport
         */
        "onInvisible"?: (event: CustomEvent<void>) => void;
        /**
          * emit `visible` event, when element get visible in viewport
         */
        "onVisible"?: (event: CustomEvent<void>) => void;
    }
    interface WRadiogroup {
        "alignment"?: 'vertical' | 'horizontal';
        "label"?: string;
        "onWInput"?: (event: CustomEvent<any>) => void;
        "options"?: Array<Option>;
        "value"?: any;
    }
    interface WRow {
        /**
          * flex align-items
         */
        "align"?: 'start' | 'center' | 'end' | 'stretch';
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap"?: string;
        /**
          * flex justify-content
         */
        "justify"?: 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';
        /**
          * padding left and right: string, e.g. '1rem', '1px'
         */
        "padding"?: string;
        /**
          * flex wrap
         */
        "wrap"?: 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface WSelect {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design possible values: - 'secondary', 'primary', 'error', 'success', 'warning'
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label"?: string;
        /**
          * if input type == numeric -> max value
         */
        "max"?: string;
        /**
          * if input type == numeric -> min value
         */
        "min"?: string;
        "multiple"?: boolean;
        /**
          * emitted on blur
         */
        "onWBlur"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on change
         */
        "onWChange"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on focus
         */
        "onWFocus"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on input
         */
        "onWInput"?: (event: CustomEvent<any>) => void;
        "options"?: Option[];
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        "searchable"?: boolean;
        /**
          * size of the input
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type == numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate"?: boolean;
    }
    interface WSlider {
    }
    interface WSpoiler {
        /**
          * label of the spoiler
         */
        "label"?: string;
        /**
          * emit when the spoiler is closed
         */
        "onWClose"?: (event: CustomEvent<void>) => void;
        /**
          * emit when the spoiler is opened
         */
        "onWOpen"?: (event: CustomEvent<void>) => void;
        /**
          * set the size of the spoiler
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface WStepper {
        /**
          * disabled state of the submit button
         */
        "allData"?: boolean;
        /**
          * label of the next step button
         */
        "nextLabel"?: string;
        /**
          * disabled state of the next step button
         */
        "nextStepAvailable"?: boolean;
        /**
          * emit wNextStep event on next/previous button click
         */
        "onWStep"?: (event: CustomEvent<number>) => void;
        /**
          * emit wSubmit event on submit button click
         */
        "onWSubmit"?: (event: CustomEvent<void>) => void;
        /**
          * label of the previous step button
         */
        "prevLabel"?: string;
        /**
          * define steps without label -> steps: 3 with label -> steps: [1,'2',3] both do the same, but with array you can define the label
         */
        "steps"?: number | Array<number | string>;
        /**
          * label of the next step button
         */
        "submitLabel"?: string;
    }
    interface WTabs {
    }
    interface WTextarea {
        "cols"?: number;
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'outline' | 'secondary';
        "disabled"?: boolean;
        "label"?: string;
        "onWInput"?: (event: CustomEvent<any>) => void;
        "readonly"?: boolean;
        "required"?: boolean;
        "resize"?: 'none' | 'both' | 'horizontal' | 'vertical';
        "rows"?: number;
        "size"?: 'small' | 'medium' | 'large';
        "value"?: string | null;
    }
    interface WToggle {
    }
    interface WTooltip {
        /**
          * position of the tooltip
         */
        "axis"?: 'x' | 'y';
        /**
          * text of the tooltip
         */
        "text"?: string;
    }
    interface IntrinsicElements {
        "w-alert": WAlert;
        "w-button": WButton;
        "w-cardselect": WCardselect;
        "w-checkbox": WCheckbox;
        "w-chip": WChip;
        "w-col": WCol;
        "w-dialog": WDialog;
        "w-dropdown": WDropdown;
        "w-filepicker": WFilepicker;
        "w-form": WForm;
        "w-grid": WGrid;
        "w-group": WGroup;
        "w-icon": WIcon;
        "w-input": WInput;
        "w-menu": WMenu;
        "w-modal": WModal;
        "w-notification": WNotification;
        "w-observer": WObserver;
        "w-radiogroup": WRadiogroup;
        "w-row": WRow;
        "w-select": WSelect;
        "w-slider": WSlider;
        "w-spoiler": WSpoiler;
        "w-stepper": WStepper;
        "w-tabs": WTabs;
        "w-textarea": WTextarea;
        "w-toggle": WToggle;
        "w-tooltip": WTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "w-alert": LocalJSX.WAlert & JSXBase.HTMLAttributes<HTMLWAlertElement>;
            "w-button": LocalJSX.WButton & JSXBase.HTMLAttributes<HTMLWButtonElement>;
            "w-cardselect": LocalJSX.WCardselect & JSXBase.HTMLAttributes<HTMLWCardselectElement>;
            "w-checkbox": LocalJSX.WCheckbox & JSXBase.HTMLAttributes<HTMLWCheckboxElement>;
            "w-chip": LocalJSX.WChip & JSXBase.HTMLAttributes<HTMLWChipElement>;
            "w-col": LocalJSX.WCol & JSXBase.HTMLAttributes<HTMLWColElement>;
            "w-dialog": LocalJSX.WDialog & JSXBase.HTMLAttributes<HTMLWDialogElement>;
            "w-dropdown": LocalJSX.WDropdown & JSXBase.HTMLAttributes<HTMLWDropdownElement>;
            "w-filepicker": LocalJSX.WFilepicker & JSXBase.HTMLAttributes<HTMLWFilepickerElement>;
            "w-form": LocalJSX.WForm & JSXBase.HTMLAttributes<HTMLWFormElement>;
            "w-grid": LocalJSX.WGrid & JSXBase.HTMLAttributes<HTMLWGridElement>;
            "w-group": LocalJSX.WGroup & JSXBase.HTMLAttributes<HTMLWGroupElement>;
            "w-icon": LocalJSX.WIcon & JSXBase.HTMLAttributes<HTMLWIconElement>;
            "w-input": LocalJSX.WInput & JSXBase.HTMLAttributes<HTMLWInputElement>;
            "w-menu": LocalJSX.WMenu & JSXBase.HTMLAttributes<HTMLWMenuElement>;
            "w-modal": LocalJSX.WModal & JSXBase.HTMLAttributes<HTMLWModalElement>;
            "w-notification": LocalJSX.WNotification & JSXBase.HTMLAttributes<HTMLWNotificationElement>;
            "w-observer": LocalJSX.WObserver & JSXBase.HTMLAttributes<HTMLWObserverElement>;
            "w-radiogroup": LocalJSX.WRadiogroup & JSXBase.HTMLAttributes<HTMLWRadiogroupElement>;
            "w-row": LocalJSX.WRow & JSXBase.HTMLAttributes<HTMLWRowElement>;
            "w-select": LocalJSX.WSelect & JSXBase.HTMLAttributes<HTMLWSelectElement>;
            "w-slider": LocalJSX.WSlider & JSXBase.HTMLAttributes<HTMLWSliderElement>;
            "w-spoiler": LocalJSX.WSpoiler & JSXBase.HTMLAttributes<HTMLWSpoilerElement>;
            "w-stepper": LocalJSX.WStepper & JSXBase.HTMLAttributes<HTMLWStepperElement>;
            "w-tabs": LocalJSX.WTabs & JSXBase.HTMLAttributes<HTMLWTabsElement>;
            "w-textarea": LocalJSX.WTextarea & JSXBase.HTMLAttributes<HTMLWTextareaElement>;
            "w-toggle": LocalJSX.WToggle & JSXBase.HTMLAttributes<HTMLWToggleElement>;
            "w-tooltip": LocalJSX.WTooltip & JSXBase.HTMLAttributes<HTMLWTooltipElement>;
        }
    }
}
