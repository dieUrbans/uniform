/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { BreadCrumbItem } from "./components/u-breadcrumb/u-breadcrumb";
import { ChipDesign } from "./components/u-chip/u-chip";
import { EditorTools } from "./components/u-editor/u-editor";
import { MenuItem } from "./components/u-menuitem/u-menuitem";
import { FormButton, FormField } from "./components/u-formgen/u-formgen";
import { MenuItems } from "./components/u-menu/u-menu";
import { MenuItem as MenuItem1 } from "./components/u-menuitem/u-menuitem";
import { NotficationOption, NotificationType } from "./components/u-notification/u-notification";
import { Option } from "./components/u-radiogroup/u-radiogroup";
import { Option as Option1 } from "./components/u-select/u-select";
import { HeadOptions } from "./components/u-tablegen/u-tablegen";
export namespace Components {
    interface UAlert {
        "closeText": string;
        "name": string;
    }
    interface UBarcodescanner {
        /**
          * force get camera permission
         */
        "getPermission": () => Promise<void>;
        /**
          * [used library](https://github.com/capacitor-community/barcode-scanner)
         */
        "library": any;
        /**
          * prepare camera for faster startup
         */
        "prepareCamera": () => Promise<void>;
        /**
          * begin scanning
         */
        "startScanner": () => Promise<void>;
        /**
          * cancel scanning
         */
        "stopScanner": () => Promise<void>;
    }
    interface UBreadcrumb {
        "items": Array<BreadCrumbItem>;
        "seperator"?: string;
    }
    interface UButton {
        /**
          * color design
         */
        "design"?: 'secondary' | 'error' | 'success' | 'warning' | 'primary';
        /**
          * show disabled state
         */
        "disabled"?: boolean;
        /**
          * show only text
         */
        "flat"?: boolean;
        /**
          * change design, only show outlines
         */
        "outline"?: boolean;
        /**
          * enable border radius
         */
        "rounded"?: 'left' | 'right' | 'top' | 'bottom' | 'none' | 'all';
        /**
          * button size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * set button type
         */
        "type"?: 'button' | 'submit' | 'reset';
    }
    interface UCard {
        /**
          * color of card: string, e.g. '#000', 'black'. Default: '#9EBADE' (lightblue)
         */
        "color": string;
        /**
          * width of card: string, e.g. '12px', '20rem'. Default: '24rem'
         */
        "width": string;
    }
    interface UCardbody {
    }
    interface UCardfooter {
        /**
          * footer overlaps the cardbody and will have see through background box
         */
        "overlap": boolean;
    }
    interface UCardheader {
        /**
          * header overlaps the cardbody and will have see through background box
         */
        "overlap": boolean;
    }
    interface UCardimage {
        /**
          * height of picture: string, e.g. '400px'
         */
        "height": string;
        /**
          * src: path of image source
         */
        "src": string;
        /**
          * width of picture: string, e.g. '400px'
         */
        "width": string;
    }
    interface UCardselect {
    }
    interface UCheckbox {
        "checked": boolean;
        "disabled": boolean;
        "label": string;
        "set": (checked: boolean) => Promise<void>;
        "size": 'small' | 'medium' | 'large';
        "tristate": boolean;
    }
    interface UChip {
        /**
          * set chip text bold
         */
        "bold": boolean;
        /**
          * enable uClick event on chip
         */
        "clickable": boolean;
        /**
          * color of the chip
         */
        "design": ChipDesign;
        /**
          * (optional) label of the chip
         */
        "label"?: string;
        /**
          * size of the chip
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface UCol {
        /**
          * flex align-items: start | center | end | space-between | space-around | space-evenly
         */
        "align": | 'start'
    | 'center'
    | 'end'
    | 'space-around'
    | 'space-between'
    | 'space-evenly';
        /**
          * use with w-grid to set area
         */
        "area"?: string;
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap": string;
        /**
          * flex justify-content: flex-start | flex-end | center | baseline | stretch
         */
        "justify": 'start' | 'center' | 'end' | 'stretch';
        /**
          * padding bottom and top: string, e.g. '1rem', '1px'
         */
        "padding": string;
        /**
          * used with w-grid, set size based on number of columns on w-grid (default is 12)
         */
        "size": number;
        /**
          * flex wrap: nowrap | wrap | wrap-reverse
         */
        "wrap": 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface UCollapsible {
        /**
          * method to close collapsible
         */
        "closeCollapsible": () => Promise<void>;
        /**
          * label of the spoiler
         */
        "label": string;
        /**
          * method to open collapsible
         */
        "openCollapsible": () => Promise<void>;
        /**
          * set the size of the spoiler
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface UCollapsibleGroup {
        /**
          * if true, only one collapsible can be open at a time
         */
        "onlyOneOpen": boolean;
    }
    interface UColorpicker {
    }
    interface UDatepicker {
    }
    interface UDatetimepicker {
    }
    interface UDesktoplayout {
    }
    interface UDialog {
        "name": string;
    }
    interface UEditor {
        "tools": EditorTools;
    }
    interface UFilepicker {
        "fileEnding": string;
        "filePlural": string;
        "label": string;
        "multiple": boolean;
        "noFile": string;
        "size": 'small' | 'large';
    }
    interface UFloatingbutton {
        "color": string;
        "position": 'bottom-left' | 'bottom-right' | 'bottom-center';
    }
    interface UFloatingmenu {
        "fixed": boolean;
        "menu": Array<MenuItem>;
    }
    interface UForm {
    }
    interface UFormgen {
        "buttons": Array<FormButton>;
        "fields": Array<FormField>;
        "layout": string;
    }
    interface UGrid {
        /**
          * optional naming of grid areas
         */
        "area": Array<string[]>;
        /**
          * number of columns or array of column widths
         */
        "columns": number | Array<string>;
        /**
          * gap size
         */
        "gap": string;
        /**
          * height of grid
         */
        "height": string;
        /**
          * number of rows or array of row heights
         */
        "rows": number | Array<string>;
        /**
          * width of grid
         */
        "width": string;
    }
    interface UGroup {
        /**
          * direction of the group
         */
        "direction": 'row' | 'column';
    }
    interface UHeadline {
        /**
          * headline level which should be used
         */
        "level"?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    }
    interface UIcon {
        /**
          * border style of the icon wrapper
         */
        "borderRadius": 'rounded' | 'square' | 'circle';
        /**
          * select the design of the icon wrapper
         */
        "design": 'error' | 'success' | 'warning' | 'primary' | 'secondary';
        /**
          * if true hide the border and background color of the wrapper
         */
        "flat": boolean;
        /**
          * if true hide the background color of the wrapper
         */
        "outline": boolean;
        /**
          * if true, svg color matches color with design
         */
        "udpateSvgColor": boolean;
    }
    interface UInput {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: | 'off'
    | 'none'
    | 'on'
    | 'sentences'
    | 'words'
    | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design possible values: - 'default', 'error', 'success', 'warning'
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label": string;
        /**
          * if input type === numeric -> max value
         */
        "max"?: string;
        /**
          * if input type === numeric -> min value
         */
        "min"?: string;
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        /**
          * set blur on native input
         */
        "setBlur": () => Promise<void>;
        /**
          * set focus on native input
         */
        "setFocus": () => Promise<void>;
        /**
          * decide if (and which site) a slot should be rendered
         */
        "showSlot"?: 'left' | 'right' | 'both';
        /**
          * size of the input
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type === numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate": boolean;
        /**
          * the value of the input
         */
        "value": string | number | null;
    }
    interface UItem {
    }
    interface ULabel {
    }
    interface ULayout {
        "closeOption": () => Promise<void>;
        "showOption": () => Promise<void>;
    }
    interface ULink {
        "link": string;
        "secondary": boolean;
        "target": string;
    }
    interface UList {
        /**
          * list as row(x) or as column(y)
         */
        "alignment": 'x' | 'y';
    }
    interface ULoader {
    }
    interface UMenu {
        "axis": 'x' | 'y';
        "items": Array<MenuItems>;
        "padding": boolean;
        "width": 'fullwidth' | 'contentwidth';
    }
    interface UMenuitem {
        "active": boolean;
        "depthLevel": number;
        "item": MenuItem;
    }
    interface UMobilelayout {
        "activateOption": () => Promise<void>;
        "disableOption": () => Promise<void>;
        "showMain": () => Promise<void>;
        "showMenu": () => Promise<void>;
        "showOption": () => Promise<void>;
        "showOptions": boolean;
        "sideWidth": string;
    }
    interface UModal {
        /**
          * method to close the modal
         */
        "closeModal": (name: string) => Promise<void>;
        /**
          * should the modal be closed on backdrop click
         */
        "closeOnClick": boolean;
        /**
          * (DESKTOP only) resizable max width
         */
        "maxHeight": string;
        /**
          * (DESKTOP only) resizable max height
         */
        "maxWidth": string;
        /**
          * (DESKTOP only) resizable min height
         */
        "minHeight": string;
        /**
          * (DESKTOP only) resizable min width
         */
        "minWidth": string;
        /**
          * autoset mode for mobile or desktop
         */
        "mode": 'desktop' | 'mobile';
        /**
          * (DESKTOP only) should the modal be moveable by dragging the header
         */
        "moveable": boolean;
        /**
          * name of the modal - needed to call methods
         */
        "name": string;
        /**
          * (DESKTOP only) reset the modal position to the center of the screen
         */
        "resetPosition": boolean;
        /**
          * (DESKTOP only) should the modal be resizable
         */
        "resizeable": boolean;
        /**
          * method to open the modal
         */
        "showModal": (name: string) => Promise<void>;
        /**
          * display a close button in the top right corner
         */
        "topRightClose": boolean;
    }
    interface UMonthpicker {
    }
    interface UNavbar {
        /**
          * should the navbar be fixed to the top or bottom of the screen - layout should be position relative
         */
        "fixed": boolean;
        /**
          * position of the navbar
         */
        "position": 'top' | 'bottom';
    }
    interface UNotification {
        "error": (title: string, message?: string, delay?: number) => Promise<void>;
        "position": | 'top-right'
    | 'top-left'
    | 'bottom-right'
    | 'bottom-left'
    | 'top-center'
    | 'bottom-center';
        "show": (type: NotificationType, options: NotficationOption) => Promise<void>;
        "success": (title: string, message?: string, delay?: number) => Promise<void>;
        "warning": (title: string, message?: string, delay?: number) => Promise<void>;
    }
    interface UObserver {
    }
    interface UPagination {
        "goToPage": (page: number, eventless?: boolean) => Promise<void>;
        "pages": number;
        "showButtons": boolean;
        "showLastAndFirstPage": boolean;
        "showPages": number;
    }
    interface UParagraph {
        "backgroundColor": string;
        "color": string;
        "hyphens": string;
        "textAlign": 'jusitfy' | 'center' | 'left' | 'right';
        "textAlignLast": 'jusitfy' | 'center' | 'left' | 'right' | 'none';
    }
    interface UPopup {
        "axis": | 'x-start'
    | 'x-end'
    | 'x-center'
    | 'y-start'
    | 'y-end'
    | 'y-center';
        "visible": boolean;
    }
    interface UProgress {
        /**
          * Remove border.
         */
        "borderless": boolean;
        /**
          * Size of height of the bar, standard set to 1.25rem. Possible to use any unit.
         */
        "height": string;
        /**
          * Maximum of values
         */
        "max": number;
        /**
          * Enables text, which shows the percentage.
         */
        "showPercentage": boolean;
        /**
          * Value used to calculate progress
         */
        "value": number;
    }
    interface URadiogroup {
        "alignment": 'vertical' | 'horizontal';
        "label": string;
        "options": Array<Option>;
        "value": any;
    }
    interface URow {
        /**
          * flex align-items
         */
        "align": 'start' | 'center' | 'end' | 'stretch';
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap": string;
        /**
          * flex justify-content
         */
        "justify": | 'start'
    | 'center'
    | 'end'
    | 'space-around'
    | 'space-between'
    | 'space-evenly';
        /**
          * padding left and right: string, e.g. '1rem', '1px'
         */
        "padding": string;
        /**
          * flex width behaviour
         */
        "width": 'full' | 'content' | 'auto';
        /**
          * flex wrap
         */
        "wrap": 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface USelect {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: | 'off'
    | 'none'
    | 'on'
    | 'sentences'
    | 'words'
    | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label": string;
        /**
          * if input type === numeric -> max value
         */
        "max"?: string;
        /**
          * if input type === numeric -> min value
         */
        "min"?: string;
        "multiple": boolean;
        "options": Option[];
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        "searchable": boolean;
        /**
          * set blur on native input
         */
        "setBlur": () => Promise<void>;
        /**
          * set focus on native input
         */
        "setFocus": () => Promise<void>;
        /**
          * size of the input
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type === numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate": boolean;
        /**
          * the value of the input
         */
        "value": string | number | null;
    }
    interface USlider {
    }
    interface UStepper {
        /**
          * decide the alignment of the stepper
         */
        "alignment": 'horizontal' | 'vertical';
        /**
          * disabled state of the submit button
         */
        "allData": boolean;
        /**
          * label of the next step button
         */
        "nextLabel"?: string;
        /**
          * disabled state of the next step button
         */
        "nextStepAvailable": boolean;
        /**
          * label of the previous step button
         */
        "prevLabel"?: string;
        /**
          * define steps - without label -> steps: 3, with label -> steps: [1,'2',3], both do the same, but with array you can define the label
         */
        "steps": number | Array<number | string>;
        /**
          * label of the next step button
         */
        "submitLabel"?: string;
    }
    interface USubmenu {
        "active": boolean;
        "depthLevel": number;
        "subMenu": Array<MenuItem>;
    }
    interface UTable {
        /**
          * control border-spacing styöe
         */
        "borderSpacing": string;
        /**
          * control border-collapse style
         */
        "borderStyle": 'seperate' | 'collapse';
    }
    interface UTablecell {
        /**
          * should checkbox be rendered
         */
        "checkbox": boolean;
        "data": string;
    }
    interface UTablefoot {
    }
    interface UTablegen {
        /**
          * the data to be rendered as rows
         */
        "data": Array<any>;
        /**
          * the header will be sticked to the top of the table
         */
        "fixedHeader": boolean;
        /**
          * the column definition and setting
         */
        "heading": Array<HeadOptions>;
        /**
          * emits uLastElement when the last row is visible
         */
        "observe": boolean;
        /**
          * should the rows be resizeable (not implemented yet)
         */
        "resizeable": boolean;
        /**
          * programmatically select a row
         */
        "select": (index: number) => Promise<void>;
        /**
          * renders a checkbox in front of each row
         */
        "selectable": boolean;
        /**
          * programmatically unselect a row
         */
        "unselect": (index: number) => Promise<void>;
    }
    interface UTablehead {
    }
    interface UTablerow {
    }
    interface UTabs {
    }
    interface UTerms {
    }
    interface UText {
        /**
          * font color: string, e.g. '#e1e1e1', 'lightblue'. Default is '#fff' (white).
         */
        "color": string;
        /**
          * font size: string, e.g. '12px', '1rem'. Default is '1rem'.
         */
        "size": string;
        /**
          * text-transfrom: string, e.g. 'uppercase', 'lowercase'.
         */
        "transform": string;
        /**
          * font weight: string, e.g. 'bold'. Default is 'normal'.
         */
        "weight": string;
    }
    interface UTextarea {
        "cols": number;
        "design": | 'primary'
    | 'error'
    | 'success'
    | 'warning'
    | 'outline'
    | 'secondary';
        "disabled": boolean;
        "label"?: string;
        "readonly": boolean;
        "required": boolean;
        "resize": 'none' | 'both' | 'horizontal' | 'vertical';
        "rows": number;
        "size": 'small' | 'medium' | 'large';
        "value": string | null;
    }
    interface UTimepicker {
    }
    interface UToggle {
    }
    interface UTooltip {
        /**
          * arrow alignment
         */
        "alignment": 'start' | 'center' | 'end';
        /**
          * position of the tooltip
         */
        "axis": 'x' | 'y';
        /**
          * render custom content instead of text
         */
        "content"?: boolean;
        /**
          * text of the tooltip
         */
        "text": string;
        /**
          * choose trigger event
         */
        "trigger": 'click' | 'hover';
    }
    interface UTouch {
    }
    interface UWeekpicker {
    }
}
declare global {
    interface HTMLUAlertElement extends Components.UAlert, HTMLStencilElement {
    }
    var HTMLUAlertElement: {
        prototype: HTMLUAlertElement;
        new (): HTMLUAlertElement;
    };
    interface HTMLUBarcodescannerElement extends Components.UBarcodescanner, HTMLStencilElement {
    }
    var HTMLUBarcodescannerElement: {
        prototype: HTMLUBarcodescannerElement;
        new (): HTMLUBarcodescannerElement;
    };
    interface HTMLUBreadcrumbElement extends Components.UBreadcrumb, HTMLStencilElement {
    }
    var HTMLUBreadcrumbElement: {
        prototype: HTMLUBreadcrumbElement;
        new (): HTMLUBreadcrumbElement;
    };
    interface HTMLUButtonElement extends Components.UButton, HTMLStencilElement {
    }
    var HTMLUButtonElement: {
        prototype: HTMLUButtonElement;
        new (): HTMLUButtonElement;
    };
    interface HTMLUCardElement extends Components.UCard, HTMLStencilElement {
    }
    var HTMLUCardElement: {
        prototype: HTMLUCardElement;
        new (): HTMLUCardElement;
    };
    interface HTMLUCardbodyElement extends Components.UCardbody, HTMLStencilElement {
    }
    var HTMLUCardbodyElement: {
        prototype: HTMLUCardbodyElement;
        new (): HTMLUCardbodyElement;
    };
    interface HTMLUCardfooterElement extends Components.UCardfooter, HTMLStencilElement {
    }
    var HTMLUCardfooterElement: {
        prototype: HTMLUCardfooterElement;
        new (): HTMLUCardfooterElement;
    };
    interface HTMLUCardheaderElement extends Components.UCardheader, HTMLStencilElement {
    }
    var HTMLUCardheaderElement: {
        prototype: HTMLUCardheaderElement;
        new (): HTMLUCardheaderElement;
    };
    interface HTMLUCardimageElement extends Components.UCardimage, HTMLStencilElement {
    }
    var HTMLUCardimageElement: {
        prototype: HTMLUCardimageElement;
        new (): HTMLUCardimageElement;
    };
    interface HTMLUCardselectElement extends Components.UCardselect, HTMLStencilElement {
    }
    var HTMLUCardselectElement: {
        prototype: HTMLUCardselectElement;
        new (): HTMLUCardselectElement;
    };
    interface HTMLUCheckboxElement extends Components.UCheckbox, HTMLStencilElement {
    }
    var HTMLUCheckboxElement: {
        prototype: HTMLUCheckboxElement;
        new (): HTMLUCheckboxElement;
    };
    interface HTMLUChipElement extends Components.UChip, HTMLStencilElement {
    }
    var HTMLUChipElement: {
        prototype: HTMLUChipElement;
        new (): HTMLUChipElement;
    };
    interface HTMLUColElement extends Components.UCol, HTMLStencilElement {
    }
    var HTMLUColElement: {
        prototype: HTMLUColElement;
        new (): HTMLUColElement;
    };
    interface HTMLUCollapsibleElement extends Components.UCollapsible, HTMLStencilElement {
    }
    var HTMLUCollapsibleElement: {
        prototype: HTMLUCollapsibleElement;
        new (): HTMLUCollapsibleElement;
    };
    interface HTMLUCollapsibleGroupElement extends Components.UCollapsibleGroup, HTMLStencilElement {
    }
    var HTMLUCollapsibleGroupElement: {
        prototype: HTMLUCollapsibleGroupElement;
        new (): HTMLUCollapsibleGroupElement;
    };
    interface HTMLUColorpickerElement extends Components.UColorpicker, HTMLStencilElement {
    }
    var HTMLUColorpickerElement: {
        prototype: HTMLUColorpickerElement;
        new (): HTMLUColorpickerElement;
    };
    interface HTMLUDatepickerElement extends Components.UDatepicker, HTMLStencilElement {
    }
    var HTMLUDatepickerElement: {
        prototype: HTMLUDatepickerElement;
        new (): HTMLUDatepickerElement;
    };
    interface HTMLUDatetimepickerElement extends Components.UDatetimepicker, HTMLStencilElement {
    }
    var HTMLUDatetimepickerElement: {
        prototype: HTMLUDatetimepickerElement;
        new (): HTMLUDatetimepickerElement;
    };
    interface HTMLUDesktoplayoutElement extends Components.UDesktoplayout, HTMLStencilElement {
    }
    var HTMLUDesktoplayoutElement: {
        prototype: HTMLUDesktoplayoutElement;
        new (): HTMLUDesktoplayoutElement;
    };
    interface HTMLUDialogElement extends Components.UDialog, HTMLStencilElement {
    }
    var HTMLUDialogElement: {
        prototype: HTMLUDialogElement;
        new (): HTMLUDialogElement;
    };
    interface HTMLUEditorElement extends Components.UEditor, HTMLStencilElement {
    }
    var HTMLUEditorElement: {
        prototype: HTMLUEditorElement;
        new (): HTMLUEditorElement;
    };
    interface HTMLUFilepickerElement extends Components.UFilepicker, HTMLStencilElement {
    }
    var HTMLUFilepickerElement: {
        prototype: HTMLUFilepickerElement;
        new (): HTMLUFilepickerElement;
    };
    interface HTMLUFloatingbuttonElement extends Components.UFloatingbutton, HTMLStencilElement {
    }
    var HTMLUFloatingbuttonElement: {
        prototype: HTMLUFloatingbuttonElement;
        new (): HTMLUFloatingbuttonElement;
    };
    interface HTMLUFloatingmenuElement extends Components.UFloatingmenu, HTMLStencilElement {
    }
    var HTMLUFloatingmenuElement: {
        prototype: HTMLUFloatingmenuElement;
        new (): HTMLUFloatingmenuElement;
    };
    interface HTMLUFormElement extends Components.UForm, HTMLStencilElement {
    }
    var HTMLUFormElement: {
        prototype: HTMLUFormElement;
        new (): HTMLUFormElement;
    };
    interface HTMLUFormgenElement extends Components.UFormgen, HTMLStencilElement {
    }
    var HTMLUFormgenElement: {
        prototype: HTMLUFormgenElement;
        new (): HTMLUFormgenElement;
    };
    interface HTMLUGridElement extends Components.UGrid, HTMLStencilElement {
    }
    var HTMLUGridElement: {
        prototype: HTMLUGridElement;
        new (): HTMLUGridElement;
    };
    interface HTMLUGroupElement extends Components.UGroup, HTMLStencilElement {
    }
    var HTMLUGroupElement: {
        prototype: HTMLUGroupElement;
        new (): HTMLUGroupElement;
    };
    interface HTMLUHeadlineElement extends Components.UHeadline, HTMLStencilElement {
    }
    var HTMLUHeadlineElement: {
        prototype: HTMLUHeadlineElement;
        new (): HTMLUHeadlineElement;
    };
    interface HTMLUIconElement extends Components.UIcon, HTMLStencilElement {
    }
    var HTMLUIconElement: {
        prototype: HTMLUIconElement;
        new (): HTMLUIconElement;
    };
    interface HTMLUInputElement extends Components.UInput, HTMLStencilElement {
    }
    var HTMLUInputElement: {
        prototype: HTMLUInputElement;
        new (): HTMLUInputElement;
    };
    interface HTMLUItemElement extends Components.UItem, HTMLStencilElement {
    }
    var HTMLUItemElement: {
        prototype: HTMLUItemElement;
        new (): HTMLUItemElement;
    };
    interface HTMLULabelElement extends Components.ULabel, HTMLStencilElement {
    }
    var HTMLULabelElement: {
        prototype: HTMLULabelElement;
        new (): HTMLULabelElement;
    };
    interface HTMLULayoutElement extends Components.ULayout, HTMLStencilElement {
    }
    var HTMLULayoutElement: {
        prototype: HTMLULayoutElement;
        new (): HTMLULayoutElement;
    };
    interface HTMLULinkElement extends Components.ULink, HTMLStencilElement {
    }
    var HTMLULinkElement: {
        prototype: HTMLULinkElement;
        new (): HTMLULinkElement;
    };
    interface HTMLUListElement extends Components.UList, HTMLStencilElement {
    }
    var HTMLUListElement: {
        prototype: HTMLUListElement;
        new (): HTMLUListElement;
    };
    interface HTMLULoaderElement extends Components.ULoader, HTMLStencilElement {
    }
    var HTMLULoaderElement: {
        prototype: HTMLULoaderElement;
        new (): HTMLULoaderElement;
    };
    interface HTMLUMenuElement extends Components.UMenu, HTMLStencilElement {
    }
    var HTMLUMenuElement: {
        prototype: HTMLUMenuElement;
        new (): HTMLUMenuElement;
    };
    interface HTMLUMenuitemElement extends Components.UMenuitem, HTMLStencilElement {
    }
    var HTMLUMenuitemElement: {
        prototype: HTMLUMenuitemElement;
        new (): HTMLUMenuitemElement;
    };
    interface HTMLUMobilelayoutElement extends Components.UMobilelayout, HTMLStencilElement {
    }
    var HTMLUMobilelayoutElement: {
        prototype: HTMLUMobilelayoutElement;
        new (): HTMLUMobilelayoutElement;
    };
    interface HTMLUModalElement extends Components.UModal, HTMLStencilElement {
    }
    var HTMLUModalElement: {
        prototype: HTMLUModalElement;
        new (): HTMLUModalElement;
    };
    interface HTMLUMonthpickerElement extends Components.UMonthpicker, HTMLStencilElement {
    }
    var HTMLUMonthpickerElement: {
        prototype: HTMLUMonthpickerElement;
        new (): HTMLUMonthpickerElement;
    };
    interface HTMLUNavbarElement extends Components.UNavbar, HTMLStencilElement {
    }
    var HTMLUNavbarElement: {
        prototype: HTMLUNavbarElement;
        new (): HTMLUNavbarElement;
    };
    interface HTMLUNotificationElement extends Components.UNotification, HTMLStencilElement {
    }
    var HTMLUNotificationElement: {
        prototype: HTMLUNotificationElement;
        new (): HTMLUNotificationElement;
    };
    interface HTMLUObserverElement extends Components.UObserver, HTMLStencilElement {
    }
    var HTMLUObserverElement: {
        prototype: HTMLUObserverElement;
        new (): HTMLUObserverElement;
    };
    interface HTMLUPaginationElement extends Components.UPagination, HTMLStencilElement {
    }
    var HTMLUPaginationElement: {
        prototype: HTMLUPaginationElement;
        new (): HTMLUPaginationElement;
    };
    interface HTMLUParagraphElement extends Components.UParagraph, HTMLStencilElement {
    }
    var HTMLUParagraphElement: {
        prototype: HTMLUParagraphElement;
        new (): HTMLUParagraphElement;
    };
    interface HTMLUPopupElement extends Components.UPopup, HTMLStencilElement {
    }
    var HTMLUPopupElement: {
        prototype: HTMLUPopupElement;
        new (): HTMLUPopupElement;
    };
    interface HTMLUProgressElement extends Components.UProgress, HTMLStencilElement {
    }
    var HTMLUProgressElement: {
        prototype: HTMLUProgressElement;
        new (): HTMLUProgressElement;
    };
    interface HTMLURadiogroupElement extends Components.URadiogroup, HTMLStencilElement {
    }
    var HTMLURadiogroupElement: {
        prototype: HTMLURadiogroupElement;
        new (): HTMLURadiogroupElement;
    };
    interface HTMLURowElement extends Components.URow, HTMLStencilElement {
    }
    var HTMLURowElement: {
        prototype: HTMLURowElement;
        new (): HTMLURowElement;
    };
    interface HTMLUSelectElement extends Components.USelect, HTMLStencilElement {
    }
    var HTMLUSelectElement: {
        prototype: HTMLUSelectElement;
        new (): HTMLUSelectElement;
    };
    interface HTMLUSliderElement extends Components.USlider, HTMLStencilElement {
    }
    var HTMLUSliderElement: {
        prototype: HTMLUSliderElement;
        new (): HTMLUSliderElement;
    };
    interface HTMLUStepperElement extends Components.UStepper, HTMLStencilElement {
    }
    var HTMLUStepperElement: {
        prototype: HTMLUStepperElement;
        new (): HTMLUStepperElement;
    };
    interface HTMLUSubmenuElement extends Components.USubmenu, HTMLStencilElement {
    }
    var HTMLUSubmenuElement: {
        prototype: HTMLUSubmenuElement;
        new (): HTMLUSubmenuElement;
    };
    interface HTMLUTableElement extends Components.UTable, HTMLStencilElement {
    }
    var HTMLUTableElement: {
        prototype: HTMLUTableElement;
        new (): HTMLUTableElement;
    };
    interface HTMLUTablecellElement extends Components.UTablecell, HTMLStencilElement {
    }
    var HTMLUTablecellElement: {
        prototype: HTMLUTablecellElement;
        new (): HTMLUTablecellElement;
    };
    interface HTMLUTablefootElement extends Components.UTablefoot, HTMLStencilElement {
    }
    var HTMLUTablefootElement: {
        prototype: HTMLUTablefootElement;
        new (): HTMLUTablefootElement;
    };
    interface HTMLUTablegenElement extends Components.UTablegen, HTMLStencilElement {
    }
    var HTMLUTablegenElement: {
        prototype: HTMLUTablegenElement;
        new (): HTMLUTablegenElement;
    };
    interface HTMLUTableheadElement extends Components.UTablehead, HTMLStencilElement {
    }
    var HTMLUTableheadElement: {
        prototype: HTMLUTableheadElement;
        new (): HTMLUTableheadElement;
    };
    interface HTMLUTablerowElement extends Components.UTablerow, HTMLStencilElement {
    }
    var HTMLUTablerowElement: {
        prototype: HTMLUTablerowElement;
        new (): HTMLUTablerowElement;
    };
    interface HTMLUTabsElement extends Components.UTabs, HTMLStencilElement {
    }
    var HTMLUTabsElement: {
        prototype: HTMLUTabsElement;
        new (): HTMLUTabsElement;
    };
    interface HTMLUTermsElement extends Components.UTerms, HTMLStencilElement {
    }
    var HTMLUTermsElement: {
        prototype: HTMLUTermsElement;
        new (): HTMLUTermsElement;
    };
    interface HTMLUTextElement extends Components.UText, HTMLStencilElement {
    }
    var HTMLUTextElement: {
        prototype: HTMLUTextElement;
        new (): HTMLUTextElement;
    };
    interface HTMLUTextareaElement extends Components.UTextarea, HTMLStencilElement {
    }
    var HTMLUTextareaElement: {
        prototype: HTMLUTextareaElement;
        new (): HTMLUTextareaElement;
    };
    interface HTMLUTimepickerElement extends Components.UTimepicker, HTMLStencilElement {
    }
    var HTMLUTimepickerElement: {
        prototype: HTMLUTimepickerElement;
        new (): HTMLUTimepickerElement;
    };
    interface HTMLUToggleElement extends Components.UToggle, HTMLStencilElement {
    }
    var HTMLUToggleElement: {
        prototype: HTMLUToggleElement;
        new (): HTMLUToggleElement;
    };
    interface HTMLUTooltipElement extends Components.UTooltip, HTMLStencilElement {
    }
    var HTMLUTooltipElement: {
        prototype: HTMLUTooltipElement;
        new (): HTMLUTooltipElement;
    };
    interface HTMLUTouchElement extends Components.UTouch, HTMLStencilElement {
    }
    var HTMLUTouchElement: {
        prototype: HTMLUTouchElement;
        new (): HTMLUTouchElement;
    };
    interface HTMLUWeekpickerElement extends Components.UWeekpicker, HTMLStencilElement {
    }
    var HTMLUWeekpickerElement: {
        prototype: HTMLUWeekpickerElement;
        new (): HTMLUWeekpickerElement;
    };
    interface HTMLElementTagNameMap {
        "u-alert": HTMLUAlertElement;
        "u-barcodescanner": HTMLUBarcodescannerElement;
        "u-breadcrumb": HTMLUBreadcrumbElement;
        "u-button": HTMLUButtonElement;
        "u-card": HTMLUCardElement;
        "u-cardbody": HTMLUCardbodyElement;
        "u-cardfooter": HTMLUCardfooterElement;
        "u-cardheader": HTMLUCardheaderElement;
        "u-cardimage": HTMLUCardimageElement;
        "u-cardselect": HTMLUCardselectElement;
        "u-checkbox": HTMLUCheckboxElement;
        "u-chip": HTMLUChipElement;
        "u-col": HTMLUColElement;
        "u-collapsible": HTMLUCollapsibleElement;
        "u-collapsible-group": HTMLUCollapsibleGroupElement;
        "u-colorpicker": HTMLUColorpickerElement;
        "u-datepicker": HTMLUDatepickerElement;
        "u-datetimepicker": HTMLUDatetimepickerElement;
        "u-desktoplayout": HTMLUDesktoplayoutElement;
        "u-dialog": HTMLUDialogElement;
        "u-editor": HTMLUEditorElement;
        "u-filepicker": HTMLUFilepickerElement;
        "u-floatingbutton": HTMLUFloatingbuttonElement;
        "u-floatingmenu": HTMLUFloatingmenuElement;
        "u-form": HTMLUFormElement;
        "u-formgen": HTMLUFormgenElement;
        "u-grid": HTMLUGridElement;
        "u-group": HTMLUGroupElement;
        "u-headline": HTMLUHeadlineElement;
        "u-icon": HTMLUIconElement;
        "u-input": HTMLUInputElement;
        "u-item": HTMLUItemElement;
        "u-label": HTMLULabelElement;
        "u-layout": HTMLULayoutElement;
        "u-link": HTMLULinkElement;
        "u-list": HTMLUListElement;
        "u-loader": HTMLULoaderElement;
        "u-menu": HTMLUMenuElement;
        "u-menuitem": HTMLUMenuitemElement;
        "u-mobilelayout": HTMLUMobilelayoutElement;
        "u-modal": HTMLUModalElement;
        "u-monthpicker": HTMLUMonthpickerElement;
        "u-navbar": HTMLUNavbarElement;
        "u-notification": HTMLUNotificationElement;
        "u-observer": HTMLUObserverElement;
        "u-pagination": HTMLUPaginationElement;
        "u-paragraph": HTMLUParagraphElement;
        "u-popup": HTMLUPopupElement;
        "u-progress": HTMLUProgressElement;
        "u-radiogroup": HTMLURadiogroupElement;
        "u-row": HTMLURowElement;
        "u-select": HTMLUSelectElement;
        "u-slider": HTMLUSliderElement;
        "u-stepper": HTMLUStepperElement;
        "u-submenu": HTMLUSubmenuElement;
        "u-table": HTMLUTableElement;
        "u-tablecell": HTMLUTablecellElement;
        "u-tablefoot": HTMLUTablefootElement;
        "u-tablegen": HTMLUTablegenElement;
        "u-tablehead": HTMLUTableheadElement;
        "u-tablerow": HTMLUTablerowElement;
        "u-tabs": HTMLUTabsElement;
        "u-terms": HTMLUTermsElement;
        "u-text": HTMLUTextElement;
        "u-textarea": HTMLUTextareaElement;
        "u-timepicker": HTMLUTimepickerElement;
        "u-toggle": HTMLUToggleElement;
        "u-tooltip": HTMLUTooltipElement;
        "u-touch": HTMLUTouchElement;
        "u-weekpicker": HTMLUWeekpickerElement;
    }
}
declare namespace LocalJSX {
    interface UAlert {
        "closeText"?: string;
        "name"?: string;
    }
    interface UBarcodescanner {
        /**
          * [used library](https://github.com/capacitor-community/barcode-scanner)
         */
        "library"?: any;
        /**
          * return scanned element
         */
        "onUScan"?: (event: CustomEvent<string>) => void;
        /**
          * event when scan is started
         */
        "onUStartScan"?: (event: CustomEvent<void>) => void;
        /**
          * event when scan is stopped
         */
        "onUStopScan"?: (event: CustomEvent<void>) => void;
    }
    interface UBreadcrumb {
        "items"?: Array<BreadCrumbItem>;
        "onUBreadcrumbClick"?: (event: CustomEvent<string>) => void;
        "seperator"?: string;
    }
    interface UButton {
        /**
          * color design
         */
        "design"?: 'secondary' | 'error' | 'success' | 'warning' | 'primary';
        /**
          * show disabled state
         */
        "disabled"?: boolean;
        /**
          * show only text
         */
        "flat"?: boolean;
        /**
          * emit wClick on button click
         */
        "onUClick"?: (event: CustomEvent<void>) => void;
        /**
          * change design, only show outlines
         */
        "outline"?: boolean;
        /**
          * enable border radius
         */
        "rounded"?: 'left' | 'right' | 'top' | 'bottom' | 'none' | 'all';
        /**
          * button size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * set button type
         */
        "type"?: 'button' | 'submit' | 'reset';
    }
    interface UCard {
        /**
          * color of card: string, e.g. '#000', 'black'. Default: '#9EBADE' (lightblue)
         */
        "color"?: string;
        /**
          * width of card: string, e.g. '12px', '20rem'. Default: '24rem'
         */
        "width"?: string;
    }
    interface UCardbody {
    }
    interface UCardfooter {
        /**
          * footer overlaps the cardbody and will have see through background box
         */
        "overlap"?: boolean;
    }
    interface UCardheader {
        /**
          * header overlaps the cardbody and will have see through background box
         */
        "overlap"?: boolean;
    }
    interface UCardimage {
        /**
          * height of picture: string, e.g. '400px'
         */
        "height"?: string;
        /**
          * src: path of image source
         */
        "src"?: string;
        /**
          * width of picture: string, e.g. '400px'
         */
        "width"?: string;
    }
    interface UCardselect {
    }
    interface UCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "onUChange"?: (event: CustomEvent<boolean>) => void;
        "size"?: 'small' | 'medium' | 'large';
        "tristate"?: boolean;
    }
    interface UChip {
        /**
          * set chip text bold
         */
        "bold"?: boolean;
        /**
          * enable uClick event on chip
         */
        "clickable"?: boolean;
        /**
          * color of the chip
         */
        "design"?: ChipDesign;
        /**
          * (optional) label of the chip
         */
        "label"?: string;
        /**
          * emit uClick event on chip click
         */
        "onUClick"?: (event: CustomEvent<void>) => void;
        /**
          * size of the chip
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface UCol {
        /**
          * flex align-items: start | center | end | space-between | space-around | space-evenly
         */
        "align"?: | 'start'
    | 'center'
    | 'end'
    | 'space-around'
    | 'space-between'
    | 'space-evenly';
        /**
          * use with w-grid to set area
         */
        "area"?: string;
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap"?: string;
        /**
          * flex justify-content: flex-start | flex-end | center | baseline | stretch
         */
        "justify"?: 'start' | 'center' | 'end' | 'stretch';
        /**
          * padding bottom and top: string, e.g. '1rem', '1px'
         */
        "padding"?: string;
        /**
          * used with w-grid, set size based on number of columns on w-grid (default is 12)
         */
        "size"?: number;
        /**
          * flex wrap: nowrap | wrap | wrap-reverse
         */
        "wrap"?: 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface UCollapsible {
        /**
          * label of the spoiler
         */
        "label"?: string;
        /**
          * emit when the spoiler is closed
         */
        "onUClose"?: (event: CustomEvent<void>) => void;
        /**
          * emit when the spoiler is opened
         */
        "onUOpen"?: (event: CustomEvent<void>) => void;
        /**
          * set the size of the spoiler
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface UCollapsibleGroup {
        /**
          * if true, only one collapsible can be open at a time
         */
        "onlyOneOpen"?: boolean;
    }
    interface UColorpicker {
    }
    interface UDatepicker {
    }
    interface UDatetimepicker {
    }
    interface UDesktoplayout {
    }
    interface UDialog {
        "name"?: string;
    }
    interface UEditor {
        "tools"?: EditorTools;
    }
    interface UFilepicker {
        "fileEnding"?: string;
        "filePlural"?: string;
        "label"?: string;
        "multiple"?: boolean;
        "noFile"?: string;
        "onUSelect"?: (event: CustomEvent<FileList>) => void;
        "size"?: 'small' | 'large';
    }
    interface UFloatingbutton {
        "color"?: string;
        "position"?: 'bottom-left' | 'bottom-right' | 'bottom-center';
    }
    interface UFloatingmenu {
        "fixed"?: boolean;
        "menu"?: Array<MenuItem>;
    }
    interface UForm {
    }
    interface UFormgen {
        "buttons"?: Array<FormButton>;
        "fields"?: Array<FormField>;
        "layout"?: string;
        "onUNextStep"?: (event: CustomEvent<any>) => void;
        "onUSubmit"?: (event: CustomEvent<any>) => void;
    }
    interface UGrid {
        /**
          * optional naming of grid areas
         */
        "area"?: Array<string[]>;
        /**
          * number of columns or array of column widths
         */
        "columns"?: number | Array<string>;
        /**
          * gap size
         */
        "gap"?: string;
        /**
          * height of grid
         */
        "height"?: string;
        /**
          * number of rows or array of row heights
         */
        "rows"?: number | Array<string>;
        /**
          * width of grid
         */
        "width"?: string;
    }
    interface UGroup {
        /**
          * direction of the group
         */
        "direction"?: 'row' | 'column';
    }
    interface UHeadline {
        /**
          * headline level which should be used
         */
        "level"?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    }
    interface UIcon {
        /**
          * border style of the icon wrapper
         */
        "borderRadius"?: 'rounded' | 'square' | 'circle';
        /**
          * select the design of the icon wrapper
         */
        "design"?: 'error' | 'success' | 'warning' | 'primary' | 'secondary';
        /**
          * if true hide the border and background color of the wrapper
         */
        "flat"?: boolean;
        /**
          * if true hide the background color of the wrapper
         */
        "outline"?: boolean;
        /**
          * if true, svg color matches color with design
         */
        "udpateSvgColor"?: boolean;
    }
    interface UInput {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: | 'off'
    | 'none'
    | 'on'
    | 'sentences'
    | 'words'
    | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design possible values: - 'default', 'error', 'success', 'warning'
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label"?: string;
        /**
          * if input type === numeric -> max value
         */
        "max"?: string;
        /**
          * if input type === numeric -> min value
         */
        "min"?: string;
        /**
          * emitted on blur
         */
        "onUBlur"?: (event: CustomEvent<void>) => void;
        /**
          * emitted on change
         */
        "onUChange"?: (event: CustomEvent<number | string>) => void;
        /**
          * emitted on focus
         */
        "onUFocus"?: (event: CustomEvent<void>) => void;
        /**
          * emitted on input
         */
        "onUInput"?: (event: CustomEvent<number | string>) => void;
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        /**
          * decide if (and which site) a slot should be rendered
         */
        "showSlot"?: 'left' | 'right' | 'both';
        /**
          * size of the input
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type === numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate"?: boolean;
        /**
          * the value of the input
         */
        "value"?: string | number | null;
    }
    interface UItem {
    }
    interface ULabel {
    }
    interface ULayout {
    }
    interface ULink {
        "link"?: string;
        "secondary"?: boolean;
        "target"?: string;
    }
    interface UList {
        /**
          * list as row(x) or as column(y)
         */
        "alignment"?: 'x' | 'y';
    }
    interface ULoader {
    }
    interface UMenu {
        "axis"?: 'x' | 'y';
        "items"?: Array<MenuItems>;
        "padding"?: boolean;
        "width"?: 'fullwidth' | 'contentwidth';
    }
    interface UMenuitem {
        "active"?: boolean;
        "depthLevel"?: number;
        "item"?: MenuItem;
        "onUItemSelect"?: (event: CustomEvent<MenuItem>) => void;
    }
    interface UMobilelayout {
        "showOptions"?: boolean;
        "sideWidth"?: string;
    }
    interface UModal {
        /**
          * should the modal be closed on backdrop click
         */
        "closeOnClick"?: boolean;
        /**
          * (DESKTOP only) resizable max width
         */
        "maxHeight"?: string;
        /**
          * (DESKTOP only) resizable max height
         */
        "maxWidth"?: string;
        /**
          * (DESKTOP only) resizable min height
         */
        "minHeight"?: string;
        /**
          * (DESKTOP only) resizable min width
         */
        "minWidth"?: string;
        /**
          * autoset mode for mobile or desktop
         */
        "mode"?: 'desktop' | 'mobile';
        /**
          * (DESKTOP only) should the modal be moveable by dragging the header
         */
        "moveable"?: boolean;
        /**
          * name of the modal - needed to call methods
         */
        "name"?: string;
        /**
          * event with given params
         */
        "onBeforeOpen"?: (event: CustomEvent<any>) => void;
        /**
          * (DESKTOP only) reset the modal position to the center of the screen
         */
        "resetPosition"?: boolean;
        /**
          * (DESKTOP only) should the modal be resizable
         */
        "resizeable"?: boolean;
        /**
          * display a close button in the top right corner
         */
        "topRightClose"?: boolean;
    }
    interface UMonthpicker {
    }
    interface UNavbar {
        /**
          * should the navbar be fixed to the top or bottom of the screen - layout should be position relative
         */
        "fixed"?: boolean;
        /**
          * position of the navbar
         */
        "position"?: 'top' | 'bottom';
    }
    interface UNotification {
        "position"?: | 'top-right'
    | 'top-left'
    | 'bottom-right'
    | 'bottom-left'
    | 'top-center'
    | 'bottom-center';
    }
    interface UObserver {
        /**
          * emit `invisible` event, when element looses visibility in viewport
         */
        "onInvisible"?: (event: CustomEvent<void>) => void;
        /**
          * emit `visible` event, when element get visible in viewport
         */
        "onVisible"?: (event: CustomEvent<void>) => void;
    }
    interface UPagination {
        "onPageChange"?: (event: CustomEvent<number>) => void;
        "pages"?: number;
        "showButtons"?: boolean;
        "showLastAndFirstPage"?: boolean;
        "showPages"?: number;
    }
    interface UParagraph {
        "backgroundColor"?: string;
        "color"?: string;
        "hyphens"?: string;
        "textAlign"?: 'jusitfy' | 'center' | 'left' | 'right';
        "textAlignLast"?: 'jusitfy' | 'center' | 'left' | 'right' | 'none';
    }
    interface UPopup {
        "axis"?: | 'x-start'
    | 'x-end'
    | 'x-center'
    | 'y-start'
    | 'y-end'
    | 'y-center';
        "visible"?: boolean;
    }
    interface UProgress {
        /**
          * Remove border.
         */
        "borderless"?: boolean;
        /**
          * Size of height of the bar, standard set to 1.25rem. Possible to use any unit.
         */
        "height"?: string;
        /**
          * Maximum of values
         */
        "max"?: number;
        /**
          * Enables text, which shows the percentage.
         */
        "showPercentage"?: boolean;
        /**
          * Value used to calculate progress
         */
        "value"?: number;
    }
    interface URadiogroup {
        "alignment"?: 'vertical' | 'horizontal';
        "label"?: string;
        "onUInput"?: (event: CustomEvent<any>) => void;
        "options"?: Array<Option>;
        "value"?: any;
    }
    interface URow {
        /**
          * flex align-items
         */
        "align"?: 'start' | 'center' | 'end' | 'stretch';
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap"?: string;
        /**
          * flex justify-content
         */
        "justify"?: | 'start'
    | 'center'
    | 'end'
    | 'space-around'
    | 'space-between'
    | 'space-evenly';
        /**
          * padding left and right: string, e.g. '1rem', '1px'
         */
        "padding"?: string;
        /**
          * flex width behaviour
         */
        "width"?: 'full' | 'content' | 'auto';
        /**
          * flex wrap
         */
        "wrap"?: 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface USelect {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: | 'off'
    | 'none'
    | 'on'
    | 'sentences'
    | 'words'
    | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: | 'none'
    | 'text'
    | 'tel'
    | 'url'
    | 'email'
    | 'numeric'
    | 'decimal'
    | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label"?: string;
        /**
          * if input type === numeric -> max value
         */
        "max"?: string;
        /**
          * if input type === numeric -> min value
         */
        "min"?: string;
        "multiple"?: boolean;
        /**
          * emitted on blur
         */
        "onUBlur"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on change
         */
        "onUChange"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on focus
         */
        "onUFocus"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on input
         */
        "onUInput"?: (event: CustomEvent<any>) => void;
        "options"?: Option[];
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        "searchable"?: boolean;
        /**
          * size of the input
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type === numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate"?: boolean;
        /**
          * the value of the input
         */
        "value"?: string | number | null;
    }
    interface USlider {
    }
    interface UStepper {
        /**
          * decide the alignment of the stepper
         */
        "alignment"?: 'horizontal' | 'vertical';
        /**
          * disabled state of the submit button
         */
        "allData"?: boolean;
        /**
          * label of the next step button
         */
        "nextLabel"?: string;
        /**
          * disabled state of the next step button
         */
        "nextStepAvailable"?: boolean;
        /**
          * emit wNextStep event on next/previous button click
         */
        "onUStep"?: (event: CustomEvent<number>) => void;
        /**
          * emit wSubmit event on submit button click
         */
        "onUSubmit"?: (event: CustomEvent<void>) => void;
        /**
          * label of the previous step button
         */
        "prevLabel"?: string;
        /**
          * define steps - without label -> steps: 3, with label -> steps: [1,'2',3], both do the same, but with array you can define the label
         */
        "steps"?: number | Array<number | string>;
        /**
          * label of the next step button
         */
        "submitLabel"?: string;
    }
    interface USubmenu {
        "active"?: boolean;
        "depthLevel"?: number;
        "onUOpenSubMenu"?: (event: CustomEvent<{
    menu: Array<MenuItem>;
    open: boolean;
  }>) => void;
        "subMenu"?: Array<MenuItem>;
    }
    interface UTable {
        /**
          * control border-spacing styöe
         */
        "borderSpacing"?: string;
        /**
          * control border-collapse style
         */
        "borderStyle"?: 'seperate' | 'collapse';
    }
    interface UTablecell {
        /**
          * should checkbox be rendered
         */
        "checkbox"?: boolean;
        "data"?: string;
    }
    interface UTablefoot {
    }
    interface UTablegen {
        /**
          * the data to be rendered as rows
         */
        "data": Array<any>;
        /**
          * the header will be sticked to the top of the table
         */
        "fixedHeader"?: boolean;
        /**
          * the column definition and setting
         */
        "heading": Array<HeadOptions>;
        /**
          * emits uLastElement when the last row is visible
         */
        "observe"?: boolean;
        /**
          * emits uLastElement when the last element is reached and observe is true.
         */
        "onULastElement"?: (event: CustomEvent<void>) => void;
        /**
          * emits uSelect when a row is selected. Returns an array of selected rows when selectable is true.
         */
        "onUSelect"?: (event: CustomEvent<Array<any> | object>) => void;
        /**
          * emits uStartHover when a row is hovered.
         */
        "onUStartHover"?: (event: CustomEvent<any>) => void;
        /**
          * emits uStoptHover on mouse leave.
         */
        "onUStopHover"?: (event: CustomEvent<any>) => void;
        /**
          * emits uUnselect when a row is unselected and selectable is false.
         */
        "onUUnselect"?: (event: CustomEvent<void>) => void;
        /**
          * should the rows be resizeable (not implemented yet)
         */
        "resizeable"?: boolean;
        /**
          * renders a checkbox in front of each row
         */
        "selectable"?: boolean;
    }
    interface UTablehead {
    }
    interface UTablerow {
    }
    interface UTabs {
    }
    interface UTerms {
    }
    interface UText {
        /**
          * font color: string, e.g. '#e1e1e1', 'lightblue'. Default is '#fff' (white).
         */
        "color"?: string;
        /**
          * font size: string, e.g. '12px', '1rem'. Default is '1rem'.
         */
        "size"?: string;
        /**
          * text-transfrom: string, e.g. 'uppercase', 'lowercase'.
         */
        "transform"?: string;
        /**
          * font weight: string, e.g. 'bold'. Default is 'normal'.
         */
        "weight"?: string;
    }
    interface UTextarea {
        "cols"?: number;
        "design"?: | 'primary'
    | 'error'
    | 'success'
    | 'warning'
    | 'outline'
    | 'secondary';
        "disabled"?: boolean;
        "label"?: string;
        "onUInput"?: (event: CustomEvent<any>) => void;
        "readonly"?: boolean;
        "required"?: boolean;
        "resize"?: 'none' | 'both' | 'horizontal' | 'vertical';
        "rows"?: number;
        "size"?: 'small' | 'medium' | 'large';
        "value"?: string | null;
    }
    interface UTimepicker {
    }
    interface UToggle {
    }
    interface UTooltip {
        /**
          * arrow alignment
         */
        "alignment"?: 'start' | 'center' | 'end';
        /**
          * position of the tooltip
         */
        "axis"?: 'x' | 'y';
        /**
          * render custom content instead of text
         */
        "content"?: boolean;
        /**
          * text of the tooltip
         */
        "text"?: string;
        /**
          * choose trigger event
         */
        "trigger"?: 'click' | 'hover';
    }
    interface UTouch {
    }
    interface UWeekpicker {
    }
    interface IntrinsicElements {
        "u-alert": UAlert;
        "u-barcodescanner": UBarcodescanner;
        "u-breadcrumb": UBreadcrumb;
        "u-button": UButton;
        "u-card": UCard;
        "u-cardbody": UCardbody;
        "u-cardfooter": UCardfooter;
        "u-cardheader": UCardheader;
        "u-cardimage": UCardimage;
        "u-cardselect": UCardselect;
        "u-checkbox": UCheckbox;
        "u-chip": UChip;
        "u-col": UCol;
        "u-collapsible": UCollapsible;
        "u-collapsible-group": UCollapsibleGroup;
        "u-colorpicker": UColorpicker;
        "u-datepicker": UDatepicker;
        "u-datetimepicker": UDatetimepicker;
        "u-desktoplayout": UDesktoplayout;
        "u-dialog": UDialog;
        "u-editor": UEditor;
        "u-filepicker": UFilepicker;
        "u-floatingbutton": UFloatingbutton;
        "u-floatingmenu": UFloatingmenu;
        "u-form": UForm;
        "u-formgen": UFormgen;
        "u-grid": UGrid;
        "u-group": UGroup;
        "u-headline": UHeadline;
        "u-icon": UIcon;
        "u-input": UInput;
        "u-item": UItem;
        "u-label": ULabel;
        "u-layout": ULayout;
        "u-link": ULink;
        "u-list": UList;
        "u-loader": ULoader;
        "u-menu": UMenu;
        "u-menuitem": UMenuitem;
        "u-mobilelayout": UMobilelayout;
        "u-modal": UModal;
        "u-monthpicker": UMonthpicker;
        "u-navbar": UNavbar;
        "u-notification": UNotification;
        "u-observer": UObserver;
        "u-pagination": UPagination;
        "u-paragraph": UParagraph;
        "u-popup": UPopup;
        "u-progress": UProgress;
        "u-radiogroup": URadiogroup;
        "u-row": URow;
        "u-select": USelect;
        "u-slider": USlider;
        "u-stepper": UStepper;
        "u-submenu": USubmenu;
        "u-table": UTable;
        "u-tablecell": UTablecell;
        "u-tablefoot": UTablefoot;
        "u-tablegen": UTablegen;
        "u-tablehead": UTablehead;
        "u-tablerow": UTablerow;
        "u-tabs": UTabs;
        "u-terms": UTerms;
        "u-text": UText;
        "u-textarea": UTextarea;
        "u-timepicker": UTimepicker;
        "u-toggle": UToggle;
        "u-tooltip": UTooltip;
        "u-touch": UTouch;
        "u-weekpicker": UWeekpicker;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "u-alert": LocalJSX.UAlert & JSXBase.HTMLAttributes<HTMLUAlertElement>;
            "u-barcodescanner": LocalJSX.UBarcodescanner & JSXBase.HTMLAttributes<HTMLUBarcodescannerElement>;
            "u-breadcrumb": LocalJSX.UBreadcrumb & JSXBase.HTMLAttributes<HTMLUBreadcrumbElement>;
            "u-button": LocalJSX.UButton & JSXBase.HTMLAttributes<HTMLUButtonElement>;
            "u-card": LocalJSX.UCard & JSXBase.HTMLAttributes<HTMLUCardElement>;
            "u-cardbody": LocalJSX.UCardbody & JSXBase.HTMLAttributes<HTMLUCardbodyElement>;
            "u-cardfooter": LocalJSX.UCardfooter & JSXBase.HTMLAttributes<HTMLUCardfooterElement>;
            "u-cardheader": LocalJSX.UCardheader & JSXBase.HTMLAttributes<HTMLUCardheaderElement>;
            "u-cardimage": LocalJSX.UCardimage & JSXBase.HTMLAttributes<HTMLUCardimageElement>;
            "u-cardselect": LocalJSX.UCardselect & JSXBase.HTMLAttributes<HTMLUCardselectElement>;
            "u-checkbox": LocalJSX.UCheckbox & JSXBase.HTMLAttributes<HTMLUCheckboxElement>;
            "u-chip": LocalJSX.UChip & JSXBase.HTMLAttributes<HTMLUChipElement>;
            "u-col": LocalJSX.UCol & JSXBase.HTMLAttributes<HTMLUColElement>;
            "u-collapsible": LocalJSX.UCollapsible & JSXBase.HTMLAttributes<HTMLUCollapsibleElement>;
            "u-collapsible-group": LocalJSX.UCollapsibleGroup & JSXBase.HTMLAttributes<HTMLUCollapsibleGroupElement>;
            "u-colorpicker": LocalJSX.UColorpicker & JSXBase.HTMLAttributes<HTMLUColorpickerElement>;
            "u-datepicker": LocalJSX.UDatepicker & JSXBase.HTMLAttributes<HTMLUDatepickerElement>;
            "u-datetimepicker": LocalJSX.UDatetimepicker & JSXBase.HTMLAttributes<HTMLUDatetimepickerElement>;
            "u-desktoplayout": LocalJSX.UDesktoplayout & JSXBase.HTMLAttributes<HTMLUDesktoplayoutElement>;
            "u-dialog": LocalJSX.UDialog & JSXBase.HTMLAttributes<HTMLUDialogElement>;
            "u-editor": LocalJSX.UEditor & JSXBase.HTMLAttributes<HTMLUEditorElement>;
            "u-filepicker": LocalJSX.UFilepicker & JSXBase.HTMLAttributes<HTMLUFilepickerElement>;
            "u-floatingbutton": LocalJSX.UFloatingbutton & JSXBase.HTMLAttributes<HTMLUFloatingbuttonElement>;
            "u-floatingmenu": LocalJSX.UFloatingmenu & JSXBase.HTMLAttributes<HTMLUFloatingmenuElement>;
            "u-form": LocalJSX.UForm & JSXBase.HTMLAttributes<HTMLUFormElement>;
            "u-formgen": LocalJSX.UFormgen & JSXBase.HTMLAttributes<HTMLUFormgenElement>;
            "u-grid": LocalJSX.UGrid & JSXBase.HTMLAttributes<HTMLUGridElement>;
            "u-group": LocalJSX.UGroup & JSXBase.HTMLAttributes<HTMLUGroupElement>;
            "u-headline": LocalJSX.UHeadline & JSXBase.HTMLAttributes<HTMLUHeadlineElement>;
            "u-icon": LocalJSX.UIcon & JSXBase.HTMLAttributes<HTMLUIconElement>;
            "u-input": LocalJSX.UInput & JSXBase.HTMLAttributes<HTMLUInputElement>;
            "u-item": LocalJSX.UItem & JSXBase.HTMLAttributes<HTMLUItemElement>;
            "u-label": LocalJSX.ULabel & JSXBase.HTMLAttributes<HTMLULabelElement>;
            "u-layout": LocalJSX.ULayout & JSXBase.HTMLAttributes<HTMLULayoutElement>;
            "u-link": LocalJSX.ULink & JSXBase.HTMLAttributes<HTMLULinkElement>;
            "u-list": LocalJSX.UList & JSXBase.HTMLAttributes<HTMLUListElement>;
            "u-loader": LocalJSX.ULoader & JSXBase.HTMLAttributes<HTMLULoaderElement>;
            "u-menu": LocalJSX.UMenu & JSXBase.HTMLAttributes<HTMLUMenuElement>;
            "u-menuitem": LocalJSX.UMenuitem & JSXBase.HTMLAttributes<HTMLUMenuitemElement>;
            "u-mobilelayout": LocalJSX.UMobilelayout & JSXBase.HTMLAttributes<HTMLUMobilelayoutElement>;
            "u-modal": LocalJSX.UModal & JSXBase.HTMLAttributes<HTMLUModalElement>;
            "u-monthpicker": LocalJSX.UMonthpicker & JSXBase.HTMLAttributes<HTMLUMonthpickerElement>;
            "u-navbar": LocalJSX.UNavbar & JSXBase.HTMLAttributes<HTMLUNavbarElement>;
            "u-notification": LocalJSX.UNotification & JSXBase.HTMLAttributes<HTMLUNotificationElement>;
            "u-observer": LocalJSX.UObserver & JSXBase.HTMLAttributes<HTMLUObserverElement>;
            "u-pagination": LocalJSX.UPagination & JSXBase.HTMLAttributes<HTMLUPaginationElement>;
            "u-paragraph": LocalJSX.UParagraph & JSXBase.HTMLAttributes<HTMLUParagraphElement>;
            "u-popup": LocalJSX.UPopup & JSXBase.HTMLAttributes<HTMLUPopupElement>;
            "u-progress": LocalJSX.UProgress & JSXBase.HTMLAttributes<HTMLUProgressElement>;
            "u-radiogroup": LocalJSX.URadiogroup & JSXBase.HTMLAttributes<HTMLURadiogroupElement>;
            "u-row": LocalJSX.URow & JSXBase.HTMLAttributes<HTMLURowElement>;
            "u-select": LocalJSX.USelect & JSXBase.HTMLAttributes<HTMLUSelectElement>;
            "u-slider": LocalJSX.USlider & JSXBase.HTMLAttributes<HTMLUSliderElement>;
            "u-stepper": LocalJSX.UStepper & JSXBase.HTMLAttributes<HTMLUStepperElement>;
            "u-submenu": LocalJSX.USubmenu & JSXBase.HTMLAttributes<HTMLUSubmenuElement>;
            "u-table": LocalJSX.UTable & JSXBase.HTMLAttributes<HTMLUTableElement>;
            "u-tablecell": LocalJSX.UTablecell & JSXBase.HTMLAttributes<HTMLUTablecellElement>;
            "u-tablefoot": LocalJSX.UTablefoot & JSXBase.HTMLAttributes<HTMLUTablefootElement>;
            "u-tablegen": LocalJSX.UTablegen & JSXBase.HTMLAttributes<HTMLUTablegenElement>;
            "u-tablehead": LocalJSX.UTablehead & JSXBase.HTMLAttributes<HTMLUTableheadElement>;
            "u-tablerow": LocalJSX.UTablerow & JSXBase.HTMLAttributes<HTMLUTablerowElement>;
            "u-tabs": LocalJSX.UTabs & JSXBase.HTMLAttributes<HTMLUTabsElement>;
            "u-terms": LocalJSX.UTerms & JSXBase.HTMLAttributes<HTMLUTermsElement>;
            "u-text": LocalJSX.UText & JSXBase.HTMLAttributes<HTMLUTextElement>;
            "u-textarea": LocalJSX.UTextarea & JSXBase.HTMLAttributes<HTMLUTextareaElement>;
            "u-timepicker": LocalJSX.UTimepicker & JSXBase.HTMLAttributes<HTMLUTimepickerElement>;
            "u-toggle": LocalJSX.UToggle & JSXBase.HTMLAttributes<HTMLUToggleElement>;
            "u-tooltip": LocalJSX.UTooltip & JSXBase.HTMLAttributes<HTMLUTooltipElement>;
            "u-touch": LocalJSX.UTouch & JSXBase.HTMLAttributes<HTMLUTouchElement>;
            "u-weekpicker": LocalJSX.UWeekpicker & JSXBase.HTMLAttributes<HTMLUWeekpickerElement>;
        }
    }
}
