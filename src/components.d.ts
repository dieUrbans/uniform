/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ChipDesign } from "./components/u-chip/u-chip";
import { FormButton, FormField } from "./components/u-form/u-form";
import { NotficationOption, NotificationType } from "./components/u-notification/u-notification";
import { Option } from "./components/u-radiogroup/u-radiogroup";
import { Option as Option1 } from "./components/u-select/u-select";
export namespace Components {
    interface UAlert {
    }
    interface UButton {
        /**
          * color design
         */
        "design"?: 'secondary' | 'error' | 'success' | 'warning' | 'primary';
        /**
          * show disabled state
         */
        "disabled"?: boolean;
        /**
          * show only text
         */
        "flat"?: boolean;
        /**
          * change design, only show outlines
         */
        "outline"?: boolean;
        /**
          * enable border radius
         */
        "rounded"?: 'left' | 'right' | 'top' | 'bottom' | 'none' | 'all';
        /**
          * button size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * set button type
         */
        "type"?: 'button' | 'submit' | 'reset';
    }
    interface UCard {
        "img"?: string;
        /**
          * padding left and right: string, e.g. '1rem', '1px'
         */
        "slotCount"?: number;
    }
    interface UCardselect {
    }
    interface UCheckbox {
        "checked": boolean;
        "disabled": boolean;
        "label": string;
        "set": (checked: boolean) => Promise<void>;
        "size": 'small' | 'medium' | 'large';
    }
    interface UChip {
        /**
          * set chip text bold
         */
        "bold": boolean;
        /**
          * enable wClick event on chip
         */
        "clickable": boolean;
        /**
          * color of the chip
         */
        "design": ChipDesign;
        /**
          * (optional) label of the chip
         */
        "label"?: string;
        /**
          * size of the chip
         */
        "size": 'small' | 'medium' | 'large';
    }
    interface UCol {
        /**
          * flex align-items: start | center | end | space-between | space-around | space-evenly
         */
        "align": 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';
        /**
          * use with w-grid to set area
         */
        "area"?: string;
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap": string;
        /**
          * flex justify-content: flex-start | flex-end | center | baseline | stretch
         */
        "justify": 'start' | 'center' | 'end' | 'stretch';
        /**
          * padding bottom and top: string, e.g. '1rem', '1px'
         */
        "padding": string;
        /**
          * used with w-grid, set size based on number of columns on w-grid (default is 12)
         */
        "size": number;
        /**
          * flex wrap: nowrap | wrap | wrap-reverse
         */
        "wrap": 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface UColorpicker {
    }
    interface UDatepicker {
    }
    interface UDatetimepicker {
    }
    interface UDialog {
        "name": string;
    }
    interface UDropdown {
    }
    interface UFilepicker {
        "fileEnding": string;
        "filePlural": string;
        "label": string;
        "multiple": boolean;
        "noFile": string;
        "size": 'small' | 'large';
    }
    interface UForm {
        "buttons": Array<FormButton>;
        "fields": Array<FormField>;
        "layout": string;
    }
    interface UGrid {
        /**
          * optional naming of grid areas
         */
        "area": Array<string[]>;
        /**
          * number of columns or array of column widths
         */
        "columns": number | Array<string>;
        /**
          * width, height of grid
         */
        "gap": string;
        /**
          * height of grid
         */
        "height": string;
        /**
          * number of rows or array of row heights
         */
        "rows": number | Array<string>;
        /**
          * width of grid
         */
        "width": string;
    }
    interface UGroup {
        /**
          * direction of the group
         */
        "direction": 'row' | 'column';
    }
    interface UIcon {
    }
    interface UInput {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design possible values: - 'default', 'error', 'success', 'warning'
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label": string;
        /**
          * if input type == numeric -> max value
         */
        "max"?: string;
        /**
          * if input type == numeric -> min value
         */
        "min"?: string;
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        /**
          * set blur on native input
         */
        "setBlur": () => Promise<void>;
        /**
          * set focus on native input
         */
        "setFocus": () => Promise<void>;
        /**
          * decide if (and which site) a slot should be rendered
         */
        "showSlot"?: 'left' | 'right' | 'both';
        /**
          * size of the input
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type == numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate": boolean;
        /**
          * the value of the input
         */
        "value": string | number | null;
    }
    interface UMenu {
        "area"?: string;
        "direction": 'horizontal' | 'vertical';
        "minimizeable": boolean;
    }
    interface UModal {
        "closeModal": (name: string) => Promise<void>;
        "closeOnClick": boolean;
        "maxHeight": string;
        "maxWidth": string;
        "minHeight": string;
        "minWidth": string;
        "mode": 'desktop' | 'mobile';
        "moveable": boolean;
        "name": string;
        "resetPosition": boolean;
        "resizeable": boolean;
        "showModal": (name: string) => Promise<void>;
        "topRightClose": boolean;
    }
    interface UMonthpicker {
    }
    interface UNotification {
        "error": (title: string, message?: string, delay?: number) => Promise<void>;
        "position": 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';
        "show": (type: NotificationType, options: NotficationOption) => Promise<void>;
        "success": (title: string, message?: string, delay?: number) => Promise<void>;
        "warning": (title: string, message?: string, delay?: number) => Promise<void>;
    }
    interface UObserver {
    }
    interface UPagination {
        "goToPage": (page: number) => Promise<void>;
        "pages": number;
        "showButtons": boolean;
        "showLastAndFirstPage": boolean;
        "showPages": number;
    }
    interface URadiogroup {
        "alignment": 'vertical' | 'horizontal';
        "label": string;
        "options": Array<Option>;
        "value": any;
    }
    interface URow {
        /**
          * flex align-items
         */
        "align": 'start' | 'center' | 'end' | 'stretch';
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap": string;
        /**
          * flex justify-content
         */
        "justify": 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';
        /**
          * padding left and right: string, e.g. '1rem', '1px'
         */
        "padding": string;
        /**
          * flex wrap
         */
        "wrap": 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface USelect {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design possible values: - 'secondary', 'primary', 'error', 'success', 'warning'
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label": string;
        /**
          * if input type == numeric -> max value
         */
        "max"?: string;
        /**
          * if input type == numeric -> min value
         */
        "min"?: string;
        "multiple": boolean;
        "options": Option[];
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        "searchable": boolean;
        /**
          * set blur on native input
         */
        "setBlur": () => Promise<void>;
        /**
          * set focus on native input
         */
        "setFocus": () => Promise<void>;
        /**
          * size of the input
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type == numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate": boolean;
    }
    interface USlider {
    }
    interface USpoiler {
        /**
          * label of the spoiler
         */
        "label": string;
        /**
          * set the size of the spoiler
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface UStepper {
        /**
          * disabled state of the submit button
         */
        "allData": boolean;
        /**
          * label of the next step button
         */
        "nextLabel"?: string;
        /**
          * disabled state of the next step button
         */
        "nextStepAvailable": boolean;
        /**
          * label of the previous step button
         */
        "prevLabel"?: string;
        /**
          * define steps without label -> steps: 3 with label -> steps: [1,'2',3] both do the same, but with array you can define the label
         */
        "steps": number | Array<number | string>;
        /**
          * label of the next step button
         */
        "submitLabel"?: string;
    }
    interface UTable {
        "data": Array<any>;
    }
    interface UTabs {
    }
    interface UTextarea {
        "cols": number;
        "design": 'primary' | 'error' | 'success' | 'warning' | 'outline' | 'secondary';
        "disabled": boolean;
        "label"?: string;
        "readonly": boolean;
        "required": boolean;
        "resize": 'none' | 'both' | 'horizontal' | 'vertical';
        "rows": number;
        "size": 'small' | 'medium' | 'large';
        "value": string | null;
    }
    interface UTimepicker {
    }
    interface UToggle {
    }
    interface UTooltip {
        /**
          * position of the tooltip
         */
        "axis": 'x' | 'y';
        /**
          * text of the tooltip
         */
        "text": string;
    }
    interface UWeekpicker {
    }
}
declare global {
    interface HTMLUAlertElement extends Components.UAlert, HTMLStencilElement {
    }
    var HTMLUAlertElement: {
        prototype: HTMLUAlertElement;
        new (): HTMLUAlertElement;
    };
    interface HTMLUButtonElement extends Components.UButton, HTMLStencilElement {
    }
    var HTMLUButtonElement: {
        prototype: HTMLUButtonElement;
        new (): HTMLUButtonElement;
    };
    interface HTMLUCardElement extends Components.UCard, HTMLStencilElement {
    }
    var HTMLUCardElement: {
        prototype: HTMLUCardElement;
        new (): HTMLUCardElement;
    };
    interface HTMLUCardselectElement extends Components.UCardselect, HTMLStencilElement {
    }
    var HTMLUCardselectElement: {
        prototype: HTMLUCardselectElement;
        new (): HTMLUCardselectElement;
    };
    interface HTMLUCheckboxElement extends Components.UCheckbox, HTMLStencilElement {
    }
    var HTMLUCheckboxElement: {
        prototype: HTMLUCheckboxElement;
        new (): HTMLUCheckboxElement;
    };
    interface HTMLUChipElement extends Components.UChip, HTMLStencilElement {
    }
    var HTMLUChipElement: {
        prototype: HTMLUChipElement;
        new (): HTMLUChipElement;
    };
    interface HTMLUColElement extends Components.UCol, HTMLStencilElement {
    }
    var HTMLUColElement: {
        prototype: HTMLUColElement;
        new (): HTMLUColElement;
    };
    interface HTMLUColorpickerElement extends Components.UColorpicker, HTMLStencilElement {
    }
    var HTMLUColorpickerElement: {
        prototype: HTMLUColorpickerElement;
        new (): HTMLUColorpickerElement;
    };
    interface HTMLUDatepickerElement extends Components.UDatepicker, HTMLStencilElement {
    }
    var HTMLUDatepickerElement: {
        prototype: HTMLUDatepickerElement;
        new (): HTMLUDatepickerElement;
    };
    interface HTMLUDatetimepickerElement extends Components.UDatetimepicker, HTMLStencilElement {
    }
    var HTMLUDatetimepickerElement: {
        prototype: HTMLUDatetimepickerElement;
        new (): HTMLUDatetimepickerElement;
    };
    interface HTMLUDialogElement extends Components.UDialog, HTMLStencilElement {
    }
    var HTMLUDialogElement: {
        prototype: HTMLUDialogElement;
        new (): HTMLUDialogElement;
    };
    interface HTMLUDropdownElement extends Components.UDropdown, HTMLStencilElement {
    }
    var HTMLUDropdownElement: {
        prototype: HTMLUDropdownElement;
        new (): HTMLUDropdownElement;
    };
    interface HTMLUFilepickerElement extends Components.UFilepicker, HTMLStencilElement {
    }
    var HTMLUFilepickerElement: {
        prototype: HTMLUFilepickerElement;
        new (): HTMLUFilepickerElement;
    };
    interface HTMLUFormElement extends Components.UForm, HTMLStencilElement {
    }
    var HTMLUFormElement: {
        prototype: HTMLUFormElement;
        new (): HTMLUFormElement;
    };
    interface HTMLUGridElement extends Components.UGrid, HTMLStencilElement {
    }
    var HTMLUGridElement: {
        prototype: HTMLUGridElement;
        new (): HTMLUGridElement;
    };
    interface HTMLUGroupElement extends Components.UGroup, HTMLStencilElement {
    }
    var HTMLUGroupElement: {
        prototype: HTMLUGroupElement;
        new (): HTMLUGroupElement;
    };
    interface HTMLUIconElement extends Components.UIcon, HTMLStencilElement {
    }
    var HTMLUIconElement: {
        prototype: HTMLUIconElement;
        new (): HTMLUIconElement;
    };
    interface HTMLUInputElement extends Components.UInput, HTMLStencilElement {
    }
    var HTMLUInputElement: {
        prototype: HTMLUInputElement;
        new (): HTMLUInputElement;
    };
    interface HTMLUMenuElement extends Components.UMenu, HTMLStencilElement {
    }
    var HTMLUMenuElement: {
        prototype: HTMLUMenuElement;
        new (): HTMLUMenuElement;
    };
    interface HTMLUModalElement extends Components.UModal, HTMLStencilElement {
    }
    var HTMLUModalElement: {
        prototype: HTMLUModalElement;
        new (): HTMLUModalElement;
    };
    interface HTMLUMonthpickerElement extends Components.UMonthpicker, HTMLStencilElement {
    }
    var HTMLUMonthpickerElement: {
        prototype: HTMLUMonthpickerElement;
        new (): HTMLUMonthpickerElement;
    };
    interface HTMLUNotificationElement extends Components.UNotification, HTMLStencilElement {
    }
    var HTMLUNotificationElement: {
        prototype: HTMLUNotificationElement;
        new (): HTMLUNotificationElement;
    };
    interface HTMLUObserverElement extends Components.UObserver, HTMLStencilElement {
    }
    var HTMLUObserverElement: {
        prototype: HTMLUObserverElement;
        new (): HTMLUObserverElement;
    };
    interface HTMLUPaginationElement extends Components.UPagination, HTMLStencilElement {
    }
    var HTMLUPaginationElement: {
        prototype: HTMLUPaginationElement;
        new (): HTMLUPaginationElement;
    };
    interface HTMLURadiogroupElement extends Components.URadiogroup, HTMLStencilElement {
    }
    var HTMLURadiogroupElement: {
        prototype: HTMLURadiogroupElement;
        new (): HTMLURadiogroupElement;
    };
    interface HTMLURowElement extends Components.URow, HTMLStencilElement {
    }
    var HTMLURowElement: {
        prototype: HTMLURowElement;
        new (): HTMLURowElement;
    };
    interface HTMLUSelectElement extends Components.USelect, HTMLStencilElement {
    }
    var HTMLUSelectElement: {
        prototype: HTMLUSelectElement;
        new (): HTMLUSelectElement;
    };
    interface HTMLUSliderElement extends Components.USlider, HTMLStencilElement {
    }
    var HTMLUSliderElement: {
        prototype: HTMLUSliderElement;
        new (): HTMLUSliderElement;
    };
    interface HTMLUSpoilerElement extends Components.USpoiler, HTMLStencilElement {
    }
    var HTMLUSpoilerElement: {
        prototype: HTMLUSpoilerElement;
        new (): HTMLUSpoilerElement;
    };
    interface HTMLUStepperElement extends Components.UStepper, HTMLStencilElement {
    }
    var HTMLUStepperElement: {
        prototype: HTMLUStepperElement;
        new (): HTMLUStepperElement;
    };
    interface HTMLUTableElement extends Components.UTable, HTMLStencilElement {
    }
    var HTMLUTableElement: {
        prototype: HTMLUTableElement;
        new (): HTMLUTableElement;
    };
    interface HTMLUTabsElement extends Components.UTabs, HTMLStencilElement {
    }
    var HTMLUTabsElement: {
        prototype: HTMLUTabsElement;
        new (): HTMLUTabsElement;
    };
    interface HTMLUTextareaElement extends Components.UTextarea, HTMLStencilElement {
    }
    var HTMLUTextareaElement: {
        prototype: HTMLUTextareaElement;
        new (): HTMLUTextareaElement;
    };
    interface HTMLUTimepickerElement extends Components.UTimepicker, HTMLStencilElement {
    }
    var HTMLUTimepickerElement: {
        prototype: HTMLUTimepickerElement;
        new (): HTMLUTimepickerElement;
    };
    interface HTMLUToggleElement extends Components.UToggle, HTMLStencilElement {
    }
    var HTMLUToggleElement: {
        prototype: HTMLUToggleElement;
        new (): HTMLUToggleElement;
    };
    interface HTMLUTooltipElement extends Components.UTooltip, HTMLStencilElement {
    }
    var HTMLUTooltipElement: {
        prototype: HTMLUTooltipElement;
        new (): HTMLUTooltipElement;
    };
    interface HTMLUWeekpickerElement extends Components.UWeekpicker, HTMLStencilElement {
    }
    var HTMLUWeekpickerElement: {
        prototype: HTMLUWeekpickerElement;
        new (): HTMLUWeekpickerElement;
    };
    interface HTMLElementTagNameMap {
        "u-alert": HTMLUAlertElement;
        "u-button": HTMLUButtonElement;
        "u-card": HTMLUCardElement;
        "u-cardselect": HTMLUCardselectElement;
        "u-checkbox": HTMLUCheckboxElement;
        "u-chip": HTMLUChipElement;
        "u-col": HTMLUColElement;
        "u-colorpicker": HTMLUColorpickerElement;
        "u-datepicker": HTMLUDatepickerElement;
        "u-datetimepicker": HTMLUDatetimepickerElement;
        "u-dialog": HTMLUDialogElement;
        "u-dropdown": HTMLUDropdownElement;
        "u-filepicker": HTMLUFilepickerElement;
        "u-form": HTMLUFormElement;
        "u-grid": HTMLUGridElement;
        "u-group": HTMLUGroupElement;
        "u-icon": HTMLUIconElement;
        "u-input": HTMLUInputElement;
        "u-menu": HTMLUMenuElement;
        "u-modal": HTMLUModalElement;
        "u-monthpicker": HTMLUMonthpickerElement;
        "u-notification": HTMLUNotificationElement;
        "u-observer": HTMLUObserverElement;
        "u-pagination": HTMLUPaginationElement;
        "u-radiogroup": HTMLURadiogroupElement;
        "u-row": HTMLURowElement;
        "u-select": HTMLUSelectElement;
        "u-slider": HTMLUSliderElement;
        "u-spoiler": HTMLUSpoilerElement;
        "u-stepper": HTMLUStepperElement;
        "u-table": HTMLUTableElement;
        "u-tabs": HTMLUTabsElement;
        "u-textarea": HTMLUTextareaElement;
        "u-timepicker": HTMLUTimepickerElement;
        "u-toggle": HTMLUToggleElement;
        "u-tooltip": HTMLUTooltipElement;
        "u-weekpicker": HTMLUWeekpickerElement;
    }
}
declare namespace LocalJSX {
    interface UAlert {
    }
    interface UButton {
        /**
          * color design
         */
        "design"?: 'secondary' | 'error' | 'success' | 'warning' | 'primary';
        /**
          * show disabled state
         */
        "disabled"?: boolean;
        /**
          * show only text
         */
        "flat"?: boolean;
        /**
          * emit wClick on button click
         */
        "onWClick"?: (event: CustomEvent<void>) => void;
        /**
          * change design, only show outlines
         */
        "outline"?: boolean;
        /**
          * enable border radius
         */
        "rounded"?: 'left' | 'right' | 'top' | 'bottom' | 'none' | 'all';
        /**
          * button size
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * set button type
         */
        "type"?: 'button' | 'submit' | 'reset';
    }
    interface UCard {
        "img"?: string;
        /**
          * padding left and right: string, e.g. '1rem', '1px'
         */
        "slotCount"?: number;
    }
    interface UCardselect {
    }
    interface UCheckbox {
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "onWChange"?: (event: CustomEvent<any>) => void;
        "size"?: 'small' | 'medium' | 'large';
    }
    interface UChip {
        /**
          * set chip text bold
         */
        "bold"?: boolean;
        /**
          * enable wClick event on chip
         */
        "clickable"?: boolean;
        /**
          * color of the chip
         */
        "design"?: ChipDesign;
        /**
          * (optional) label of the chip
         */
        "label"?: string;
        /**
          * emit wClick event on chip click
         */
        "onWClick"?: (event: CustomEvent<void>) => void;
        /**
          * size of the chip
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface UCol {
        /**
          * flex align-items: start | center | end | space-between | space-around | space-evenly
         */
        "align"?: 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';
        /**
          * use with w-grid to set area
         */
        "area"?: string;
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap"?: string;
        /**
          * flex justify-content: flex-start | flex-end | center | baseline | stretch
         */
        "justify"?: 'start' | 'center' | 'end' | 'stretch';
        /**
          * padding bottom and top: string, e.g. '1rem', '1px'
         */
        "padding"?: string;
        /**
          * used with w-grid, set size based on number of columns on w-grid (default is 12)
         */
        "size"?: number;
        /**
          * flex wrap: nowrap | wrap | wrap-reverse
         */
        "wrap"?: 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface UColorpicker {
    }
    interface UDatepicker {
    }
    interface UDatetimepicker {
    }
    interface UDialog {
        "name"?: string;
    }
    interface UDropdown {
    }
    interface UFilepicker {
        "fileEnding"?: string;
        "filePlural"?: string;
        "label"?: string;
        "multiple"?: boolean;
        "noFile"?: string;
        "onWSelect"?: (event: CustomEvent<FileList>) => void;
        "size"?: 'small' | 'large';
    }
    interface UForm {
        "buttons"?: Array<FormButton>;
        "fields"?: Array<FormField>;
        "layout"?: string;
        "onWNextStep"?: (event: CustomEvent<any>) => void;
        "onWSubmit"?: (event: CustomEvent<any>) => void;
    }
    interface UGrid {
        /**
          * optional naming of grid areas
         */
        "area"?: Array<string[]>;
        /**
          * number of columns or array of column widths
         */
        "columns"?: number | Array<string>;
        /**
          * width, height of grid
         */
        "gap"?: string;
        /**
          * height of grid
         */
        "height"?: string;
        /**
          * number of rows or array of row heights
         */
        "rows"?: number | Array<string>;
        /**
          * width of grid
         */
        "width"?: string;
    }
    interface UGroup {
        /**
          * direction of the group
         */
        "direction"?: 'row' | 'column';
    }
    interface UIcon {
    }
    interface UInput {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design possible values: - 'default', 'error', 'success', 'warning'
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label"?: string;
        /**
          * if input type == numeric -> max value
         */
        "max"?: string;
        /**
          * if input type == numeric -> min value
         */
        "min"?: string;
        /**
          * emitted on blur
         */
        "onWBlur"?: (event: CustomEvent<void>) => void;
        /**
          * emitted on change
         */
        "onWChange"?: (event: CustomEvent<number | string>) => void;
        /**
          * emitted on focus
         */
        "onWFocus"?: (event: CustomEvent<void>) => void;
        /**
          * emitted on input
         */
        "onWInput"?: (event: CustomEvent<number | string>) => void;
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        /**
          * decide if (and which site) a slot should be rendered
         */
        "showSlot"?: 'left' | 'right' | 'both';
        /**
          * size of the input
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type == numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate"?: boolean;
        /**
          * the value of the input
         */
        "value"?: string | number | null;
    }
    interface UMenu {
        "area"?: string;
        "direction"?: 'horizontal' | 'vertical';
        "minimizeable"?: boolean;
    }
    interface UModal {
        "closeOnClick"?: boolean;
        "maxHeight"?: string;
        "maxWidth"?: string;
        "minHeight"?: string;
        "minWidth"?: string;
        "mode"?: 'desktop' | 'mobile';
        "moveable"?: boolean;
        "name"?: string;
        "onBeforeOpen"?: (event: CustomEvent<any>) => void;
        "resetPosition"?: boolean;
        "resizeable"?: boolean;
        "topRightClose"?: boolean;
    }
    interface UMonthpicker {
    }
    interface UNotification {
        "position"?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';
    }
    interface UObserver {
        /**
          * emit `invisible` event, when element looses visibility in viewport
         */
        "onInvisible"?: (event: CustomEvent<void>) => void;
        /**
          * emit `visible` event, when element get visible in viewport
         */
        "onVisible"?: (event: CustomEvent<void>) => void;
    }
    interface UPagination {
        "onPageChange"?: (event: CustomEvent<number>) => void;
        "pages"?: number;
        "showButtons"?: boolean;
        "showLastAndFirstPage"?: boolean;
        "showPages"?: number;
    }
    interface URadiogroup {
        "alignment"?: 'vertical' | 'horizontal';
        "label"?: string;
        "onWInput"?: (event: CustomEvent<any>) => void;
        "options"?: Array<Option>;
        "value"?: any;
    }
    interface URow {
        /**
          * flex align-items
         */
        "align"?: 'start' | 'center' | 'end' | 'stretch';
        /**
          * flex gap: string, e.g. '1rem', '1px'
         */
        "gap"?: string;
        /**
          * flex justify-content
         */
        "justify"?: 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';
        /**
          * padding left and right: string, e.g. '1rem', '1px'
         */
        "padding"?: string;
        /**
          * flex wrap
         */
        "wrap"?: 'nowrap' | 'wrap' | 'wrap-reverse';
    }
    interface USelect {
        /**
          * decide if autocapitalize should be enabled
         */
        "autoCapitalize"?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';
        /**
          * possible types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autoComplete"?: string;
        /**
          * decide if autocorect should be enabled
         */
        "autoCorrect"?: 'off' | 'on';
        /**
          * decide if input should have border radius
         */
        "borderStyle"?: 'none' | 'small' | 'large' | 'round';
        /**
          * select design possible values: - 'secondary', 'primary', 'error', 'success', 'warning'
         */
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'secondary';
        /**
          * decide if the input is disabled
         */
        "disabled"?: boolean;
        /**
          * change this prop to true to focus the input
         */
        "doFocus"?: boolean;
        /**
          * show error message below the input
         */
        "errorMsg"?: string;
        /**
          * type of the input
         */
        "inputType"?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
        /**
          * text of label The label replace the placeholder
         */
        "label"?: string;
        /**
          * if input type == numeric -> max value
         */
        "max"?: string;
        /**
          * if input type == numeric -> min value
         */
        "min"?: string;
        "multiple"?: boolean;
        /**
          * emitted on blur
         */
        "onWBlur"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on change
         */
        "onWChange"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on focus
         */
        "onWFocus"?: (event: CustomEvent<any>) => void;
        /**
          * emitted on input
         */
        "onWInput"?: (event: CustomEvent<any>) => void;
        "options"?: Option[];
        /**
          * set the pattern for the input
         */
        "pattern"?: string;
        /**
          * decide if the input is readonly
         */
        "readonly"?: boolean;
        /**
          * decide if input is required (for forms)
         */
        "required"?: boolean;
        "searchable"?: boolean;
        /**
          * size of the input
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * decide if spellcheck should be enabled
         */
        "spellCheck"?: boolean;
        /**
          * if input type == numeric -> step value
         */
        "step"?: string;
        /**
          * use function returning a boolean to validate the input -> if false, it displays error-msg
         */
        "validate"?: boolean;
    }
    interface USlider {
    }
    interface USpoiler {
        /**
          * label of the spoiler
         */
        "label"?: string;
        /**
          * emit when the spoiler is closed
         */
        "onWClose"?: (event: CustomEvent<void>) => void;
        /**
          * emit when the spoiler is opened
         */
        "onWOpen"?: (event: CustomEvent<void>) => void;
        /**
          * set the size of the spoiler
         */
        "size"?: 'small' | 'medium' | 'large';
    }
    interface UStepper {
        /**
          * disabled state of the submit button
         */
        "allData"?: boolean;
        /**
          * label of the next step button
         */
        "nextLabel"?: string;
        /**
          * disabled state of the next step button
         */
        "nextStepAvailable"?: boolean;
        /**
          * emit wNextStep event on next/previous button click
         */
        "onWStep"?: (event: CustomEvent<number>) => void;
        /**
          * emit wSubmit event on submit button click
         */
        "onWSubmit"?: (event: CustomEvent<void>) => void;
        /**
          * label of the previous step button
         */
        "prevLabel"?: string;
        /**
          * define steps without label -> steps: 3 with label -> steps: [1,'2',3] both do the same, but with array you can define the label
         */
        "steps"?: number | Array<number | string>;
        /**
          * label of the next step button
         */
        "submitLabel"?: string;
    }
    interface UTable {
        "data"?: Array<any>;
    }
    interface UTabs {
    }
    interface UTextarea {
        "cols"?: number;
        "design"?: 'primary' | 'error' | 'success' | 'warning' | 'outline' | 'secondary';
        "disabled"?: boolean;
        "label"?: string;
        "onWInput"?: (event: CustomEvent<any>) => void;
        "readonly"?: boolean;
        "required"?: boolean;
        "resize"?: 'none' | 'both' | 'horizontal' | 'vertical';
        "rows"?: number;
        "size"?: 'small' | 'medium' | 'large';
        "value"?: string | null;
    }
    interface UTimepicker {
    }
    interface UToggle {
    }
    interface UTooltip {
        /**
          * position of the tooltip
         */
        "axis"?: 'x' | 'y';
        /**
          * text of the tooltip
         */
        "text"?: string;
    }
    interface UWeekpicker {
    }
    interface IntrinsicElements {
        "u-alert": UAlert;
        "u-button": UButton;
        "u-card": UCard;
        "u-cardselect": UCardselect;
        "u-checkbox": UCheckbox;
        "u-chip": UChip;
        "u-col": UCol;
        "u-colorpicker": UColorpicker;
        "u-datepicker": UDatepicker;
        "u-datetimepicker": UDatetimepicker;
        "u-dialog": UDialog;
        "u-dropdown": UDropdown;
        "u-filepicker": UFilepicker;
        "u-form": UForm;
        "u-grid": UGrid;
        "u-group": UGroup;
        "u-icon": UIcon;
        "u-input": UInput;
        "u-menu": UMenu;
        "u-modal": UModal;
        "u-monthpicker": UMonthpicker;
        "u-notification": UNotification;
        "u-observer": UObserver;
        "u-pagination": UPagination;
        "u-radiogroup": URadiogroup;
        "u-row": URow;
        "u-select": USelect;
        "u-slider": USlider;
        "u-spoiler": USpoiler;
        "u-stepper": UStepper;
        "u-table": UTable;
        "u-tabs": UTabs;
        "u-textarea": UTextarea;
        "u-timepicker": UTimepicker;
        "u-toggle": UToggle;
        "u-tooltip": UTooltip;
        "u-weekpicker": UWeekpicker;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "u-alert": LocalJSX.UAlert & JSXBase.HTMLAttributes<HTMLUAlertElement>;
            "u-button": LocalJSX.UButton & JSXBase.HTMLAttributes<HTMLUButtonElement>;
            "u-card": LocalJSX.UCard & JSXBase.HTMLAttributes<HTMLUCardElement>;
            "u-cardselect": LocalJSX.UCardselect & JSXBase.HTMLAttributes<HTMLUCardselectElement>;
            "u-checkbox": LocalJSX.UCheckbox & JSXBase.HTMLAttributes<HTMLUCheckboxElement>;
            "u-chip": LocalJSX.UChip & JSXBase.HTMLAttributes<HTMLUChipElement>;
            "u-col": LocalJSX.UCol & JSXBase.HTMLAttributes<HTMLUColElement>;
            "u-colorpicker": LocalJSX.UColorpicker & JSXBase.HTMLAttributes<HTMLUColorpickerElement>;
            "u-datepicker": LocalJSX.UDatepicker & JSXBase.HTMLAttributes<HTMLUDatepickerElement>;
            "u-datetimepicker": LocalJSX.UDatetimepicker & JSXBase.HTMLAttributes<HTMLUDatetimepickerElement>;
            "u-dialog": LocalJSX.UDialog & JSXBase.HTMLAttributes<HTMLUDialogElement>;
            "u-dropdown": LocalJSX.UDropdown & JSXBase.HTMLAttributes<HTMLUDropdownElement>;
            "u-filepicker": LocalJSX.UFilepicker & JSXBase.HTMLAttributes<HTMLUFilepickerElement>;
            "u-form": LocalJSX.UForm & JSXBase.HTMLAttributes<HTMLUFormElement>;
            "u-grid": LocalJSX.UGrid & JSXBase.HTMLAttributes<HTMLUGridElement>;
            "u-group": LocalJSX.UGroup & JSXBase.HTMLAttributes<HTMLUGroupElement>;
            "u-icon": LocalJSX.UIcon & JSXBase.HTMLAttributes<HTMLUIconElement>;
            "u-input": LocalJSX.UInput & JSXBase.HTMLAttributes<HTMLUInputElement>;
            "u-menu": LocalJSX.UMenu & JSXBase.HTMLAttributes<HTMLUMenuElement>;
            "u-modal": LocalJSX.UModal & JSXBase.HTMLAttributes<HTMLUModalElement>;
            "u-monthpicker": LocalJSX.UMonthpicker & JSXBase.HTMLAttributes<HTMLUMonthpickerElement>;
            "u-notification": LocalJSX.UNotification & JSXBase.HTMLAttributes<HTMLUNotificationElement>;
            "u-observer": LocalJSX.UObserver & JSXBase.HTMLAttributes<HTMLUObserverElement>;
            "u-pagination": LocalJSX.UPagination & JSXBase.HTMLAttributes<HTMLUPaginationElement>;
            "u-radiogroup": LocalJSX.URadiogroup & JSXBase.HTMLAttributes<HTMLURadiogroupElement>;
            "u-row": LocalJSX.URow & JSXBase.HTMLAttributes<HTMLURowElement>;
            "u-select": LocalJSX.USelect & JSXBase.HTMLAttributes<HTMLUSelectElement>;
            "u-slider": LocalJSX.USlider & JSXBase.HTMLAttributes<HTMLUSliderElement>;
            "u-spoiler": LocalJSX.USpoiler & JSXBase.HTMLAttributes<HTMLUSpoilerElement>;
            "u-stepper": LocalJSX.UStepper & JSXBase.HTMLAttributes<HTMLUStepperElement>;
            "u-table": LocalJSX.UTable & JSXBase.HTMLAttributes<HTMLUTableElement>;
            "u-tabs": LocalJSX.UTabs & JSXBase.HTMLAttributes<HTMLUTabsElement>;
            "u-textarea": LocalJSX.UTextarea & JSXBase.HTMLAttributes<HTMLUTextareaElement>;
            "u-timepicker": LocalJSX.UTimepicker & JSXBase.HTMLAttributes<HTMLUTimepickerElement>;
            "u-toggle": LocalJSX.UToggle & JSXBase.HTMLAttributes<HTMLUToggleElement>;
            "u-tooltip": LocalJSX.UTooltip & JSXBase.HTMLAttributes<HTMLUTooltipElement>;
            "u-weekpicker": LocalJSX.UWeekpicker & JSXBase.HTMLAttributes<HTMLUWeekpickerElement>;
        }
    }
}
